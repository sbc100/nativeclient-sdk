#! -*- python -*-
#
# Copyright (c) 2011 The Native Client Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import make_nacl_env
import nacl_utils
import os

nacl_env = make_nacl_env.NaClEnvironment(
    use_c_plus_plus_libs=True, nacl_platform=os.getenv('NACL_TARGET_PLATFORM'),
    install_subdir='hello_world', lib_prefix='..')
nacl_test_env = make_nacl_env.NaClEnvironment(
    use_c_plus_plus_libs=True,
    nacl_platform=os.getenv('NACL_TARGET_PLATFORM'),
    use_ppapi=False)
for env in [nacl_env, nacl_test_env]:
  env.Append(
      # Add a CPPPATH that enables the full-path #include directives, such as
      # #include "examples/sine_synth/sine_synth.h"
      CPPPATH=[os.path.dirname(os.path.dirname(os.getcwd()))],
      # Strict ANSI compliance.
      CCFLAGS=['-pedantic', '-Werror'],
  )

sources = ['hello_world.cc', 'helper_functions.cc']
test_sources = ['helper_functions.cc', 'test_helper_functions.cc']

opt_nexes, dbg_nexes = nacl_env.AllNaClModules(sources, 'hello_world')

nacl_test_32 = nacl_test_env.Clone()
nacl_test_32.NaClTestProgram(test_sources,
                             nacl_utils.ARCH_SPECS['x86-32'],
                             module_name='hello_world_test',
                             target_name='test32')

nacl_test_64 = nacl_test_env.Clone()
nacl_test_64.NaClTestProgram(test_sources,
                             nacl_utils.ARCH_SPECS['x86-64'],
                             module_name='hello_world_test',
                             target_name='test64')

# This target is used by the SDK build system to provide a prebuilt version
# of the example in the SDK installer.
nacl_env.InstallPrebuilt('hello_world')

app_files = [
    'hello_world.html',
    'hello_world.nmf',
    ]

# Split the install of the .nexes from the other app sources so that the strip
# action is applied to the .nexes only.
install_nexes = nacl_env.NaClStrippedInstall(dir=nacl_env['NACL_INSTALL_ROOT'],
                                             source=opt_nexes)
install_app = nacl_env.Install(dir=nacl_env['NACL_INSTALL_ROOT'],
                               source=app_files)
nacl_env.Alias('install', source=install_app + install_nexes)
