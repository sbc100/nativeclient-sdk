#!/usr/bin/python2.4
#
# Copyright 2010 Native Client SDK Authors. All Rights Reserved.

""" Build file for the Pepper3D example.
"""

import os

Import('env')

env.Append(CPPPATH = ['third_party/npapi/bindings'])

program_name = 'pepper_3d'

nacl_sources = ['cube_view.cc',
                'npn_bridge.cc',
                'npp_bridge.cc',
                'pepper_3d.cc',
                'pepper_module.cc',
                'scripting_bridge.cc',
                'shader_util.cc',
                'transforms.cc']
nacl_sources = [os.path.join('nacl_module', src) for src in nacl_sources]

app_sources = ['dragger.js',
               'pepper_3d.html',
               'pepper_3d.js',
               'trackball.js',
               'vector3.js']
app_sources = [os.path.join('application', src) for src in app_sources]

if env['BUILD_TYPE'] == 'nacl':
  nacl_module = '%s.nexe' % program_name
  env.Append(LIBS = ['google_nacl_pgl', 'google_nacl_gpu'])
  env.ComponentProgram(nacl_module, nacl_sources)

  # Note that the html is required to run this program.
  env.Publish(nacl_module, 'run', app_sources)
elif env['BUILD_TYPE'] == 'plugin' and env.Bit('mac'):
  # Build a Mac trusted plugin for debugging.
  # TODO(dspringer): Once we can debug .nexes and no longer need to build
  # trusted plugins, this clause can be removed.
  mac_plugin_env = env.Clone(
      LINKFLAGS = ['-bundle', '-framework', 'Foundation']
  )
  mac_plugin_env.Append(LIBS = ['gpu'])
  # Build the plugin binary
  binary = mac_plugin_env.ComponentProgram(
      program_name,
      nacl_sources,
      COMPONENT_STATIC = False,
      COMPONENT_LIBRARY_PUBLISH=True,
      COMPONENT_LIBRARY_LINK_SUFFIXES=[]
  )
  RESOURCE_DIR = '%s/examples/pepper_3d/mac' % env['SOURCE_ROOT']
  # Create resource fork
  # TODO(dspringer): old-school resource files are no longer needed on the Mac,
  # but the Environment.Bundle() function requires it.
  RESOURCE_DESC = '%s/pepper_3d.r' % RESOURCE_DIR
  RESOURCE_FORK = 'pepper_3d.rsrc'
  REZ = '/Developer/Tools/Rez'
  env.Command(
      target = RESOURCE_FORK,
      source = RESOURCE_DESC,
      action = [Action(REZ + ' -o ${TARGET} ${SOURCE} -useDF')]
  )
  PLIST_FILE = 'Info.plist'
  ACTION = ("cp -f ${SOURCE} ${TARGET};"
            "chmod +w ${TARGET};"
            "/usr/libexec/PlistBuddy -c 'Set :CFBundleExecutable pepper_3d' ${TARGET};" 
            "/usr/libexec/PlistBuddy -c 'Set :CFBundleIdentifier com.google.pepper_3d' ${TARGET};"
            "/usr/libexec/PlistBuddy -c 'Set :CFBundleName pepper_3d' ${TARGET}")
  env.Command(
      target = PLIST_FILE,
      source = '%s/pepper_3d-Info.plist' % RESOURCE_DIR,
      action = [Action(ACTION)]
  )

  plugin_name = '${STAGING_DIR}/%s.plugin' % program_name
  mac_plugin_env.Bundle(
      plugin_name,
      BUNDLE_EXE = binary[0],
      BUNDLE_INFO_PLIST = [PLIST_FILE],
      BUNDLE_PKGINFO_FILENAME = 0,
      BUNDLE_RESOURCES = RESOURCE_FORK
  )
  env.Publish(program_name, 'run', app_sources)
