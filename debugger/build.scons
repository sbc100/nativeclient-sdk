#! -*- python -*-
#
# Copyright (c) 2011 The Native Client Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

'''Build file for building the debugger and running its tests.'''

import os
import sys

Import('env')

# Check to ensure that we're running on windows.
if not env['IS_WINDOWS']:
  Return()

# Add the system path to this environment so that we can run gclient and such
env.AppendENVPath('PATH', os.environ['PATH'])

# Duplicate all the shell environment variables, so that various Visual Studio
# tools will have the variables they expect (e.g. VS 2008 needs VS90COMNTOOLS).
# Do this using "if not in" instead of update(), so that os.environ variables
# don't override variables in env['ENV'].
for shell_var in os.environ:
  if shell_var not in env['ENV']:
    env['ENV'][shell_var] = os.environ[shell_var]

debugger_dir = os.path.join(env['ROOT_DIR'], 'debugger')

unit_tests_dir = os.path.join(debugger_dir, 'unit_tests')
unit_tests_solution = os.path.join(unit_tests_dir, 'unit_tests.sln')
unit_tests_build_command = env.BuildVSSolution('debugger', unit_tests_solution)

# Target to clean up the debugger build
env.CleanVSSolution('debugger', unit_tests_dir)

# Target to run the tests
unit_tests_exe = os.path.join(unit_tests_dir, 'Debug', 'unit_tests.exe')

unit_test_command = env.TestVSSolution(target_name='debugger',
                                       test_container=unit_tests_exe,
                                       type='exe',
                                       size='small',
                                       build_cmd=unit_tests_build_command)

integration_tests_dir = os.path.join(debugger_dir, 'chrome_integration_test')
integration_tests_solution = os.path.join(integration_tests_dir,
                                          'chrome_integration_test.sln')
integration_tests_target = 'debugger_integration'
integration_tests_build_command = env.BuildVSSolution(
    integration_tests_target, integration_tests_solution, '"Debug|x64"')
env.CleanVSSolution(integration_tests_target, integration_tests_dir)
env.DependsOnChrome(integration_tests_build_command)
env.DependsOnExamples(integration_tests_build_command)
integration_tests_exe = os.path.join(integration_tests_dir,
                                     'Debug',
                                     'chrome_integration_test.exe')

env['ENV']['BROWSER'] = '%s --no-default-browser-check --enable-logging --noerrdialogs --enable-nacl --incognito http://localhost:5103/' % env.GetChromeBinary()
env['ENV']['NACL_SDK_ROOT'] = env['ROOT_DIR']

integration_test_command = env.TestVSSolution('debugger_integration',
                                              integration_tests_exe,
                                              'exe',
                                              'large',
                                              integration_tests_build_command)

env.Depends(integration_test_command, unit_test_command)
# Without this dep, there is a chance of both test suites trying to open the
# same port at the same time.  Note that the other test has a similar optional
# dependency.  Which one is triggered depends on the include order of
# build.scons files, but this ensures that either order works.
if hasattr(env, 'run_NaClVsx.Package_tests'):
  env.AddDependency(integration_test_command, 'run_NaClVsx.Package_tests')
