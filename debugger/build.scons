#! -*- python -*-
#
# Copyright (c) 2011 The Native Client Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

'''Build file for building the debug_server and running its tests.'''

import os
import sys

Import('env')

# Check to ensure that we're running on windows.
if not env['IS_WINDOWS']:
  Return()

# Add the system path to this environment so that we can run gclient and such.
env.AppendENVPath('PATH', os.environ['PATH'])

# Duplicate all the shell environment variables, so that various Visual Studio
# tools will have the variables they expect (e.g. VS 2008 needs VS90COMNTOOLS).
# Do this using "if not in" instead of update(), so that os.environ variables
# don't override variables in env['ENV'].
for shell_var in os.environ:
  if shell_var not in env['ENV']:
    env['ENV'][shell_var] = os.environ[shell_var]
# This is used for all the other paths throughout this file.
debugger_dir = os.path.join(env['ROOT_DIR'], 'debugger')

#------------------------------------------------------------------------------
# The following section specifies build and clean targets for the debug_server.
debug_server_dir = os.path.join(debugger_dir, 'nacl-gdb_server')
debug_server_solution = os.path.join(debug_server_dir, 'nacl-gdb_server.sln')
def BuildDebugServer(bitwidth_string):
  DEBUG_SERVER_TARGET = 'debug_server_%s' % bitwidth_string
  debug_server_build_command = env.BuildVSSolution(
      DEBUG_SERVER_TARGET,
      debug_server_solution,
      '"Release|%s"' % bitwidth_string)
  env.CleanVSSolution(DEBUG_SERVER_TARGET, debug_server_dir)
  env.AlwaysBuild(debug_server_build_command)
  # The installer needs to become dependent on the result of this build step.
  env.Depends(env.GetInstallerPrereqsNode(), debug_server_build_command)
  # If this build runs alongside the examples build, it makes the examples build
  # flaky, so this step needs to happen after the examples build and before
  # generate_windows_installers.
  env.DependsOnExamples(debug_server_build_command)
  return debug_server_build_command

x64_debug_server_build_command = BuildDebugServer('x64')
BuildDebugServer('Win32')

#------------------------------------------------------------------------------
# The following section specifies build, clean, and run targets for the
# debug_server unit tests.
unit_test_dir = os.path.join(debugger_dir, 'unit_tests')
unit_test_solution = os.path.join(unit_test_dir, 'unit_tests.sln')
UNIT_TEST_TARGET = 'debug_server_unit_test'
unit_test_build_command = env.BuildVSSolution(UNIT_TEST_TARGET,
                                              unit_test_solution)
env.Depends(unit_test_build_command, x64_debug_server_build_command)
if env.HasBotTarget():
  # The target we're depending on is not directly visible from this scope.  If
  # a second instance of this style of dependency was ever needed, it would be
  # worth providing more framework, but for now we have to rely on a string
  # constant.  Note that this is necessay to keep the unit test build from
  # breaking other build targets on the bots.
  env.Requires(unit_test_build_command, env.GetInstallerTestNode())
env.CleanVSSolution(UNIT_TEST_TARGET, unit_test_dir)
unit_test_exe = os.path.join(unit_test_dir, 'Debug', 'unit_tests.exe')
unit_test_command = env.TestVSSolution(
    target_name='run_debug_server_unit_test',
    test_container=unit_test_exe,
    type='exe',
    size='small',
    build_cmd=unit_test_build_command)

#------------------------------------------------------------------------------
# The following section specifies build, clean, and run targets for the
# debug server integration tests.
integration_test_dir = os.path.join(debugger_dir, 'chrome_integration_test')
integration_test_solution = os.path.join(integration_test_dir,
                                         'chrome_integration_test.sln')
INTEGRATION_TEST_TARGET = 'debug_server_integration_test'
integration_test_build_command = env.BuildVSSolution(
    INTEGRATION_TEST_TARGET, integration_test_solution, '"Release|x64"')
env.DependsOnChrome(integration_test_build_command)
env.Depends(integration_test_build_command, unit_test_command)
env.CleanVSSolution(INTEGRATION_TEST_TARGET, integration_test_dir)
integration_test_exe = os.path.join(integration_test_dir,
                                    'x64',
                                    'Release',
                                    'chrome_integration_test.exe')

chrome_args = [str(env.GetChromeBinary()),
               '--enable-file-cookies',
               '--dom-automation',
               '--disable-web-resources',
               '--disable-preconnect',
               '--no-first-run',
               '--no-default-browser-check',
               '--enable-logging',
               '--safebrowsing-disable-auto-update',
               '--no-default-browser-check',
               '--noerrdialogs',
               '--metrics-recording-only',
               '--allow-file-access-from-files',
               '--disable-tab-closeable-state-watcher',
               '--allow-file-access',
               '--unlimited-quota-for-files',
               '--enable-nacl',
               '--log-level=3',
               '--incognito',
               'http://localhost:5103/']

env['ENV']['BROWSER'] = ' '.join(chrome_args)
env['ENV']['NACL_SDK_ROOT'] = env['ROOT_DIR']

integration_test_command = env.TestVSSolution(
    target_name='run_debug_server_integration_test',
    test_container=integration_test_exe,
    type='exe',
    size='large',
    build_cmd=integration_test_build_command)

#------------------------------------------------------------------------------
# The following section specifies build and clean targets for the nacl-bpad.
nacl_bpad_dir = os.path.join(debugger_dir, 'nacl-bpad')
nacl_bpad_solution = os.path.join(nacl_bpad_dir, 'nacl-bpad.sln')
NACL_BPAD_BUILD_TARGET = 'nacl-bpad'
nacl_bpad_build_command = env.BuildVSSolution(NACL_BPAD_BUILD_TARGET,
                                              nacl_bpad_solution,
                                              '"Release|x64"')
env.CleanVSSolution(NACL_BPAD_BUILD_TARGET, nacl_bpad_dir)
env.AlwaysBuild(nacl_bpad_build_command)
# The installer needs to become dependent on the result of this build step.
env.Depends(env.GetInstallerPrereqsNode(), nacl_bpad_build_command)
# If this build runs alongside the examples build, it makes the examples build
# flaky, so this step needs to happen after the examples build and before
# generate_windows_installers.
env.DependsOnExamples(nacl_bpad_build_command)
