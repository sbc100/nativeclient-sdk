#! -*- python -*-
#
# Copyright (c) 2011 The Native Client Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

"""Build file for running scripts in the build_tools directory

Currently, this script only runs the generate_installers.py command

Adapted from scons documentation: http://www.scons.org/wiki/UnitTests
and from ../project_templates/test.scons
"""

__author__ = 'mball@google.com (Matt Ball)'

import os
import sys

Import('env')

# Add the system path to this environment so that we can run gclient and such
env.AppendENVPath('PATH', os.environ['PATH'])
# Duplicate all the shell environment variables, so that various Visual Studio
# tools will have the variables they expect (e.g. VS 2008 needs VS90COMNTOOLS).
# Do this using "if not in" instead of update(), so that os.environ variables
# don't override variables in env['ENV'].
for shell_var in os.environ:
  if shell_var not in env['ENV']:
    env['ENV'][shell_var] = os.environ[shell_var]

# The development flag tells generate_installers not to download a fresh
# copy of all the cygwin packages.
installer_action = ["${PYTHON}", "${SOURCE}", "--jobs=%s" % env['JOB_COUNT']]

if env['DEVELOPMENT'] == '1':
  installer_action.append('--development')


installer_node = env.Command(
    target='generate_installers_dummy_target.txt',
    source='generate_installers.py',
    action=' '.join(installer_action))

env.AddNodeAliases(installer_node, ['bot'], 'installer')

install_file = 'nacl-sdk.exe' if sys.platform == 'win32' else 'nacl-sdk.tgz'
installer = os.path.join(os.path.dirname(env['ROOT_DIR']), install_file)

installer_test_node = env.CreatePythonUnitTest(
    'tests/installer_test.py',
    [installer_node],
    buffered=False,
    params=['--jobs=%s' % env['JOB_COUNT'],
            '--outdir=%s' % os.path.join('scons-out', 'sdk_installer'),
            installer],
    banner='test installer')

env.AddNodeToTestSuite(installer_test_node, ['bot'],
                       'run_installer_test', 'large')


#------------------------------------------------------------------------------
# Add build_tools unit tests
build_utils_test = env.CreatePythonUnitTest('tests/build_utils_test.py',
                                            ['build_utils.py'])
env.AddNodeToTestSuite(build_utils_test,
                       ['bot'],
                       'run_build_utils_test',
                       'small')

installer_contents_test = env.CreatePythonUnitTest(
    'tests/installer_contents_test.py', ['installer_contents.py'])
env.AddNodeToTestSuite(installer_contents_test,
                       ['bot'],
                       'run_build_utils_test',
                       'small')

nacl_utils_test = env.CreatePythonUnitTest('nacl_sdk_scons/nacl_utils_test.py',
                                           ['nacl_sdk_scons/nacl_utils.py'])
env.AddNodeToTestSuite(nacl_utils_test,
                       ['bot'],
                       'run_nacl_utils_test',
                       'small')

