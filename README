Welcome to the Native Client SDK.

Revision date: March 25, 2010.


SETUP

Tarballs are available here:

  http://build.chromium.org/buildbot/snapshots/nacl_new_sdk/

Note that they are platform-specific.

The tarball comes with everything you need to build both a .nexe (release
module) and a debug version (Mac only for now, Linux hopefully by the end of
the week).  It uses gnumake for building (normally included with Linux and
Mac OS X, and you can get it for Windows).

To build the examples, you use gnumake, e.g.:
  cd examples; make

Some useful make targets:
  make clean # clean everything
  make # build everything
  make release # build the release version of your module (.nexe)
  make debug # build the debug version

Build products all go in either the debug or release directory.

It does not include a dev-channel version of Chrome.  You can get the dev-
channel version of Chrome here:

  http://dev.chromium.org/getting-involved/dev-channel


RUN YOUR MODULE

To run anything you build with the SDK, you'll need to supply these flags:
  --no-sandbox --internal-nacl --internal-pepper --enable-gpu-plugin

For example, to run on a Mac from the command-line:

  Chromium.app/Contents/MacOS/Chromium --no-sandbox --internal-nacl \
      --internal-pepper --enable-gpu-plugin

On Linux:

  ./chrome  --no-sandbox --internal-nacl --internal-pepper --enable-gpu-plugin

To load the .nexes, you will need to run a local http server.  A python script
is included in the examples directory, you can start it like this:

  cd examples
  python httpd.py

Note: this will serve everything under examples.  The root of the server is the
examples dir; make puts all built products in
{debug,release}/<platform_target>

So to load an html page that references your .nexe, you would use this URL on
a Mac build:

  http://localhost:5103/release/mac_x86-32/npapi_helloworld.html

A note about MIME types: Debug plugins must have a MIME type that begins
with 'pepper-'.  Release modules must have a MIME type that is exactly
'application/x-nacl-srpc'.  The HTML files bundled with the examples show how
to specify a different MIME type for the embedded object when you are debugging
a module versus running a release module.  Be sure to set the MIME
type of your debug version to match the MIME type in the HTML (on the Mac,
this means the Info.plist has to have one WebPluginMIMETypes entry).


DEBUG YOUR MODULE

Important: your module (both debug and release versions) runs in a separate
process than Chrome.  If you use gdb, this means you will have to run a separate
gdb session and attach to the module's process.

To debug your module, follow these steps:

1. Create an HTML page that loads the debug version when debugging, or the
  release version otherwise.  The examples come with HTML pages that show
  how to do this, using '#debug' in the URL.  For example, the URL that loads
  the debug version of npapi_helloworld for debugging is (note the trailing
  '#debug'):
    file:///Users/sirhaxalot/nacl-sdk/examples/debug/mac_x86-32/npapi_helloworld.html#debug
  which is given as a command-line parameter to Chrome.  The URL for the
  release .nexe is (note the absence of #debug):
    http://localhost/examples/release/mac_x86-32/npapi_helloworld.html
  You type this into the Chrome browser once it is running, and you have
  started a local http server (see below).

2. Create a symlink to your debug module from your platform's standard internet
   plugin location.  On the Mac, this is ~/Library/Internet\ Plug-Ins.  For
   example:
    cd ~/Library/Internet\ Plug-Ins/
    ln -s ~/nacl-sdk/src/examples/debug/mac_x86-32/npapi_helloworld.plugin .

3. Instead of creating a symlink, you can launch Chrome with the --load-plugin=
  and --plugin-startup-dialog flags.  --load-plugin takes an absolute path to
  the debug version of your module.  The latter part of this path will have
  debug/<platform_target> in it.
  For example, on the Mac this would be:
    --load-plugin=/Users/sirhaxalot/nacl-sdk/examples/debug/mac_x86-32/npapi_helloworld.plugin

  --plugin-startup-dialog causes Chrome to pause and wait for a debugger to
  attach to the child module process.  It writes the PID of the child process
  to the console so you can tell which one it is.  For example, you will see
  this output:
    Plugin (12554) paused waiting for debugger to attach @ pid
    
  An example launch line used to debug on the Mac:
    Chromium.app/Contents/MacOS/Chromium --no-sandbox --internal-nacl \
        --internal-pepper --enable-gpu-plugin \
        --plugin-startup-dialog \
        --load-plugin=/Users/sirhaxalot/nacl-sdk/examples/debug/mac_x86-32/npapi_helloworld.plugin \
        file:///Users/sirhaxalot/nacl-sdk/examples/debug/mac_x86-32/npapi_helloworld.html#debug
  
  --single-process is an alternative to --plugin-starup-dialog, and loads the
  debug module directly into the instance of Chrome you are debugging.  You
  do not need to use a separate gdb session to debug your module with this flag.
  This mode is great for debugging start-up functions such as NP_Initialize().

4. Attach to the module process.
  Run gdb in its own shell.  At the gdb prompt:
    attach <plugin_pid>
  For example (using the PID from step 1. above):
    % gdb
    (gdb) attach 12554
  Now you should be able to set break points and debug as you normally would.
  
  As soon as you continue in your gdb session, Chrome will resume execution.


OTHER DEVELOPMENT

If you want to contribute to the Native Client SDK itself, the code site is
here:

  http://code.google.com/p/nativeclient-sdk/

Note that this is an internal Google site.


KNOWN ISSUES

- [All, Debug]: To debug your .nexe you have to build a special version.  Once
  you have a debug version of your module, you can run Chrome in your favorite
  debugger (e.g. gdb); in addition to the list of flags above, you can add the
  --load-plugin=/path/to/my/plugin (see above).

- [Linux]: you can only load .nexes in 32-bit Chrome.  64-bit doesn't yet work.
