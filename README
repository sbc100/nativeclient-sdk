Welcome to the Native Client SDK.

Revision date: April 3, 2010.


SETUP

Tarballs are available here:

  http://build.chromium.org/buildbot/snapshots/nacl_new_sdk/

Note that each platform has its own tarball.

The tarball comes with everything you need to build a module you can publish
on the web (a .nexe file) and a development version you can use for debugging.
It uses gnumake for building (normally included with Linux and Mac OS X, and
you can get it for Windows).

To build the examples, you use gnumake. For example:
  cd examples; make

Some useful make targets:
  make clean   # clean everything
  make         # build everything
  make publish # build the publish version of your module (.nexe)
  make develop # build the develop version (you can debug this)
  make run_hello_world # build and run the publish version of the
                       # hello_world example - starts a local http server if
                       # needed
  make run_pi_generator # build and run the publish version of the
                        # pi_generator example
  make run_tumbler # build and run the publish version of the tumbler example

Build products go in either the publish or develop directory.

The tarball does not include a Dev-channel version of Google Chrome.
You can get the Dev-channel version here:

  http://dev.chromium.org/getting-involved/dev-channel

It's best to put the copy of Chromium in a well-known place so you can access
it easily.  On the Mac, /Applications is a good place.


RUN YOUR MODULE

To run the publish version of a module you build with the SDK, you'll need to
supply these flags:
  --no-sandbox --enable-nacl

To run the development version of a module you build with the SDK, you also
have to supply the --internal-pepper flag:
  --no-sandbox --enable-nacl --internal-pepper

For example, to run a module on a Mac from the command-line:

  # Run the publish version:
  Chromium.app/Contents/MacOS/Chromium --no-sandbox --enable-nacl
  # Run the development version:
  Chromium.app/Contents/MacOS/Chromium --no-sandbox --enable-nacl --internal-pepper

On Linux:

  # Run the publish version:
  ./chrome --no-sandbox --enable-nacl
  # Run the development version:
  ./chrome --no-sandbox --enable-nacl --internal-pepper

To load the .nexes, you will need to have a web server.  There is a local HTTP
server included in the examples directory, you can start it like this:

  cd examples
  python httpd.py

Note: this will serve everything under examples.  The root of the server is the
examples dir; make puts all built products in
{develop,publish}/<platform_target>

So to load an HTML page that references your .nexe, you would use this URL on
a Mac build:

  http://localhost:5103/publish/mac_x86/hello_world.html

A note about MIME types: Develop modules must have a MIME type that begins
with 'pepper-'.  Publish modules must have a MIME type that is exactly
'application/x-nacl-srpc'.  The HTML files bundled with the examples show how
to specify a different MIME type for the embedded object when you are debugging
a module versus running a publish module.  Be sure to set the MIME
type of your development version to match the MIME type in the HTML.  On the
Mac, this means the Info.plist has to have one WebPluginMIMETypes entry; on
Linux, this means you have to implement the NP_GetMIMEDescription() entry
point in your module code (see, for example, hello_world/hello_world_module.cc).


DEBUG YOUR MODULE

Important: Your module (both develop and publish versions) runs in a different
process than Google Chrome.  You can use the --single-process flag to
override this.

To debug your module, follow these steps:

1. Create an HTML page that loads the develop version when debugging, or the
  publish version otherwise.  The examples come with HTML pages that show
  how to do this, using '#develop' in the URL.  For example, the URL that loads
  the development version of hello_world for debugging is (note the trailing
  '#develop'):
    file:///Users/sirhaxalot/nacl-sdk/examples/develop/mac_x86/hello_world.html#develop
  which is given as a command-line parameter to Google Chrome.  The URL that
  loads the publish version of your module is (note the absence of #develop):
    http://localhost/examples/publish/mac_x86/hello_world.html
  You type this into the Google Chrome browser once it is running, and you have
  started a local HTTP server (see below).

2. Create a symlink to the development version of your module from your
  platform's standard internet plugin location.  On the Mac, this is
  ~/Library/Internet\ Plug-Ins.  For example:
    cd ~/Library/Internet\ Plug-Ins/
    ln -s ~/nacl-sdk/src/examples/develop/mac_x86/hello_world.plugin .

3. Instead of creating a symlink, you can launch Google Chrome with the
  --load-plugin= and --single-process flags.  --load-plugin takes an
  absolute path to the development version of your module.  The latter part
  of this path will have develop/<platform_target> in it.
  For example, on the Mac this would be:
  --load-plugin=/Users/sirhaxalot/nacl-sdk/examples/develop/mac_x86/hello_world.plugin

  An example launch line used to debug on the Mac:
    Chromium.app/Contents/MacOS/Chromium --no-sandbox --enable-nacl \
        --internal-pepper \
        --single-process \
        --load-plugin=/Users/sirhaxalot/nacl-sdk/examples/develop/mac_x86/hello_world.plugin \
        file:///Users/sirhaxalot/nacl-sdk/examples/develop/mac_x86/hello_world.html#develop

  --single-process loads the develop version of your module directly into the
  instance of Google Chrome you are debugging.


OTHER DEVELOPMENT

If you want to contribute to the Native Client SDK itself, the code site is
here:

  http://code.google.com/p/nativeclient-sdk/

Note that this is an internal Google site.


KNOWN ISSUES

- [All, Develop]: To debug your .nexe you have to build a special version.  Once
  you have a development version of your module, you can run Google Chrome in
  your favorite debugger (e.g. gdb); in addition to the list of flags above, you
  can add --load-plugin=/path/to/my/plugin (see above).

- [Linux]: Only 32-bit browsers can load .nexes. 64-bit doesn't work yet.

TROUBLESHOOTING

- [Mac]: If you see "Missing Plug-in", check that the symlinks in
  ~/Library/Internet\ Plug-Ins are correct.  If you need to fix them, you will
  have to quit and restart the browser.  Make sure you started the browser with
  the --internal-pepper flag in addition to the --enable-nacl flag.