#! -*- python -*-
#
# Copyright (c) 2010 The Native Client SDK Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

""" Main scons script for Native Client SDK builds.

Do not invoke this script directly, but instead use the hammer.sh or hammer.bat
wrapper function.  E.g.

Linux or Mac:
  ./hammer.sh [Options...]

Windows:
  hammer.bat [Options...]
"""

import os
import sys

#------------------------------------------------------------------------------
HELP_STRING = """
===============================================================================
Help for NaCl SDK
===============================================================================

* cleaning:            ./hammer.sh -c
* build a target:      ./hammer.sh <target>

Supported targets:
  * examples          Build all of the examples
  * docs              Build all of the Doxygen documentation
  * installer         Build the SDK installer
  * tests             Run all the unit tests
  * bot               Runs everything that the build and try bots run

Supported flags:
  * DEVELOPMENT=1     Runs with development options for the installer build
                      (currently this suppresses unneeded downloads)

More targets are listed below in the automatically generated help section.

===============================================================================
Automatically generated help follows:
===============================================================================
"""

#------------------------------------------------------------------------------
# Perform some environment checks before running.
# Note that hammer.sh should set NACL_SDK_ROOT before this script runs.

if os.getenv('NACL_SDK_ROOT') is None:
  sys.stderr.write('NACL_SDK_ROOT must be defined as the root directory'
                   ' of NaCl SDK.\n')
  sys.exit(1)


def GetToolchainRoot(sdk_root=None):
  '''Build a string representing the NaCl toolchain root.
  This root points at the platform-specific directory.
  '''
  if sdk_root is None:
    sdk_root = os.getenv('NACL_SDK_ROOT', '')
  if sys.platform == 'cygwin' or sys.platform.startswith('win'):
    variant = 'win_x86'
  elif sys.platform in ['darwin', 'macos']:
    variant = 'mac_x86'
  elif sys.platform in ['linux', 'linux2']:
    variant = 'linux_x86'
  else:
    sys.stderr.write('Unrecognized build platform: %s\n' % sys.platform)
    return ''

  return os.path.join(sdk_root, 'toolchain', variant)


# By default, run with a parallel build (i.e. '-j num_jobs').
# Use a default value proportional to the number of cpu cores on the system.
# To run a serial build, explicitly type '-j 1' on the command line.
CORE_COUNT = 1
try:
  import multiprocessing
  CORE_COUNT = multiprocessing.cpu_count()
except (ImportError, NotImplementedError):
  pass

SetOption('num_jobs', CORE_COUNT + 1)

#-----------------------------------------------------------------------------
# The environment_list contains all the build environments that we want to
# specify.  Selecting a particular environment is done using the --mode option.
# Each environment that we support gets appended to this list.
environment_list = []

#-----------------------------------------------------------------------------
# Create the base environment, from which all other environments are derived.
base_env = Environment(
    tools = ['component_setup'],
    CPPPATH = ['$MAIN_DIR'],
    CPPDEFINES = [
      'BOOST_ALL_NO_LIB',
    ],
    NACL_TOOLCHAIN_ROOT = GetToolchainRoot(os.getenv('NACL_SDK_ROOT')),
)

# It is possible to override these values on the command line by typing
# something like this:
#   PYTHON=/path/to/my/python
#   DEVELOPMENT=1
base_env.SetDefault(
    PYTHON = ARGUMENTS.get('PYTHON', 'python'),
    DEVELOPMENT = ARGUMENTS.get('DEVELOPMENT', ''),
    MAKE = ARGUMENTS.get('MAKE', 'make'),
)

# The list of .scons files is order-dependent.  Scons will build their targets
# in the order they appear.
base_env.Append(
    BUILD_SCONSCRIPTS = [
        'examples/build.scons',
        'documentation/build.scons',
        'build_tools/build.scons',
        'project_templates/test.scons',
    ],
)

base_env.Help(HELP_STRING)

KNOWN_TEST_SUITES = frozenset([
    'unit',
    ])


def AddNodeToTestSuite(env, node, suite_names, node_name, test_size='all'):
  '''Adds a test node to a given set of suite names

  These tests are automatically added to the run_all_tests target and are
  listed in the help screen.

  This function is loosely based on a function of the same name in the
  Native Client repository

  Args:
    env - The environment from which this function was called
    node - A scons node (e.g., file, command, etc) to be added to set suite
    suite_names - A list of test suite names.  For none, pass an empty list
    node_name - The target name used for running this test
    test_size - The relative run-time of this test: small, medium, or large
  '''

  # CommandTest can return an empty list when it silently discards a test
  if not node:
    return

  AlwaysBuild(node)

  for s in suite_names:
    if s not in KNOWN_TEST_SUITES:
      raise Exception('Testsuite "%s" for test "%s" is unknown' %
                      (s, node_name))
    env.Alias(s, node)

  if test_size not in ['small', 'medium', 'large', 'all']:
    raise Exception('Invalid test size for %s' % node_name)

  # Note that COMPONENT_TEST_SIZE is set to 'large' by default, which
  # populates a largely redundant list of 'large' tests.  Note that all
  # tests are added to 'all', so setting test_size='all' is a no-op
  env.ComponentTestOutput(node_name, node, COMPONENT_TEST_SIZE=test_size)

base_env.AddMethod(AddNodeToTestSuite)


def AddNodeAliases(env, node, alias_names):
  '''Adds a node as an aliased target, makes the 'bot' target depend on that
  node.

  Args:
    env - The calling environment
    node - A target node to add to the build bot
    alias_names - A list of additional aliases to add this node to
    node_name - An optional alias name for this node
  '''

  if not node:
    return

  for s in alias_names:
    env.Alias(s, node)

base_env.AddMethod(AddNodeAliases)


#-----------------------------------------------------------------------------
# This is a simple environment that primarily for targets that aren't built
# directly by scons, and therefore don't need any special environment setup
build_env = base_env.Clone(
    BUILD_TYPE = 'build',
    BUILD_GROUPS = ['default', 'all'],
    BUILD_TYPE_DESCRIPTION = 'Default build environment',
    HOST_PLATFORMS = '*',
    )

environment_list.append(build_env)


# -----------------------------------------------------------------------------
BuildComponents(environment_list)

# Require specifying an explicit target
Default(None)
