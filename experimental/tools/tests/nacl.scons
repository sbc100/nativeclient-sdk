# -*- python -*-
# Copyright (c) 2011 The Native Client Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

Import('env')

# TODO(robertm): explore if/why this overly restrictive guard is necessary
if env.Bit('bitcode'):
   Return()

if not env.Bit('build_x86_32'):
  Return()

srpc_libs = ['srpc', 'platform', 'gio', 'pthread', 'imc', 'imc_syscalls']
env.Replace(
    # Ensure that these compilations use only SDK include files.
    CPPPATH=[],
    # Ensure that these compilations use only SDK include libraries, etc.
    # Only 32 bit libraries are supported by this test.
    LINKFLAGS=['-m32'],
    )

# Check that all the libraries were installed, a simple test builds and links.
env.ComponentProgram('libs_present_test.nexe',
                     ['libs_present_test.cc',
                      'libs_present_stub.cc'],
                     # This list should include all the libraries published
                     # into the SDK.
                     LIBS=srpc_libs + ['c', 'm', 'nacl', 'nosys'])

# Check that GDB can print backtrace.
env.ComponentProgram('hello_world_gdb.nexe',
                     'hello_world_gdb.c')

gdb_test = env.CommandGdbTestNacl(
    'hello_world_gdb.out',
    command=[env.File('hello_world_gdb.nexe')],
    stdout_golden=env.File('hello_world_gdb.stdout'),
    input=env.File('hello_world_gdb.in'),
    filter_regex=("\"^(Breakpoint 1 at)|"
                   "^(Breakpoint 1, )0x[0-9a-fA-F]+ (in hello_world)|"
                   "^(#0 ) 0x[0-9a-fA-F]+ (in hello_world)|"
                   "^(#1 ) 0x[0-9a-fA-F]+ (in main)\""
                   ),
    filter_group_only='true',
    )

# Currently gdb only works on Linux
if env.Bit('host_linux'):
  # TODO(ncbray) enable this test or completely remove it.
  # http://code.google.com/p/nativeclient/issues/detail?id=1180
  env.AddNodeToTestSuite(['hello_world_gdb.nexe', gdb_test],
                         ['medium_tests'], 'gdb_minimal_test', is_broken=True)


# TODO(mseaborn): explain this magic
if 'TRUSTED_ENV' in env:
  env2 = env.Clone()
  env2.PrependENVPath('PATH', env['TRUSTED_ENV'].SubstList2('${STAGING_DIR}'))
  toolchain_tests = [
    env2.Command(
        'test_toolchain',
        ['${SCONSTRUCT_DIR}/tools/tests/test_toolchain.py',
         env['TRUSTED_ENV'].SubstList2('${STAGING_DIR}/ncval${PROGSUFFIX}')],
        '$PYTHON ${SOURCES[0].abspath}')]

else:
  print ('WARNING: no trusted env specified so skipping toolchain test. '
         'Try, e.g. MODE=dbg-host,nacl')
  toolchain_tests = []

# If we aren't running on a tester (built_elsewhere),
# try to use the toolchain.
if not env.Bit('built_elsewhere'):
  # Eventually we may want more SDK tests.
  # NOTE this test is explicitly run by the toolchain makefile in a case
  # where toolchain_tests is empty. Do not assume the lack of dependencies
  # means the test is disabled.
  # NOTE this test is effectively a no-op when TRUSTED_ENV is not present and
  # libs_present_test.nexe has already been built. If libs_present.nexe has not
  # been built, this will force it to be built during testing.
  env.AddNodeToTestSuite(['libs_present_test.nexe', toolchain_tests],
                         ['small_tests'], 'sdk_minimal_test')
