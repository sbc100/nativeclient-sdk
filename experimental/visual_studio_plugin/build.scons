#! -*- python -*-
#
# Copyright (c) 2011 The Native Client Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

'''Build file for building the VSX plugin and running its test projects.'''

__author__ = 'mlinck@google.com (Michael Linck)'

import os
import sys

Import('env')

# Check to ensure that we're running on windows.
if not env['IS_WINDOWS']:
  Return()

# Add the system path to this environment so that we can run gclient and such
env.AppendENVPath('PATH', os.environ['PATH'])

# Duplicate all the shell environment variables, so that various Visual Studio
# tools will have the variables they expect (e.g. VS 2008 needs VS90COMNTOOLS).
# Do this using "if not in" instead of update(), so that os.environ variables
# don't override variables in env['ENV'].
for shell_var in os.environ:
  if shell_var not in env['ENV']:
    env['ENV'][shell_var] = os.environ[shell_var]

vsx_root_path = os.path.join(
    env['ROOT_DIR'], 'experimental', 'visual_studio_plugin')
env['ENV']['NACL_VSX_ROOT'] = vsx_root_path
env['ENV']['NACL_SDK_ROOT'] = env['ROOT_DIR']


# The action to build the visual studio project targets.  This action could
# easily be used to build anything that builds in Visual Studio, hence the name
# starts with vs, not vsx.
vs_build_action = ['vcvarsall',
                   '&&',
                   'devenv',
                   '${SOURCE}',
                   '/build']

nacl_vsx_solution = os.path.join(vsx_root_path, 'build', 'NativeClientVSX.sln')

# Builds the VSX plugin solution.
vsx_build_all_command = env.Command(
    target='vsx_build_output.txt',
    source=nacl_vsx_solution,
    action=' '.join(vs_build_action))

env.Depends(vsx_build_all_command, env.GetToolchainNode())
env.AddNodeAliases(vsx_build_all_command, ['bot'], 'vsx_build')


def DefineVSTestSet(package_name, type, size):
  '''Defines a set of tests to be added to the scons test set.

  This function accepts a package name and the type and test size and creates
  a testing target that can be run as part of the build.  The target is added
  to the bot and the appropriate test size targets, and an individual target
  for the test set is created as well.

  Arguments:
    package - The name of the VS package whose test package should be added to
              the build.
    type - The type test package to expect as a string.  This can be 'dll' or
           'exe'.
    size - Which test harness to add the tests to; small, medium, or large
  '''
  unit_test_name = '%s_UnitTestProject' % package_name
  test_container = os.path.join(vsx_root_path, 'src', package_name,
                                unit_test_name, 'bin', 'Debug',
                                '%s.%s' % (unit_test_name, type))

  # Can't use the test container as SOURCE because it is generated indirectly
  # and using it as source would declare an explicit dependency on a target,
  # generated by scons.  Files that exist in the environment can be used in that
  # way, but only if they exist at the time when scons starts to run, or if
  # the are explicit Command targets.  As a result, source is empty.
  vs_test_action = test_container
  if type is 'dll':
    vs_test_action = ' '.join(['vcvarsall',
                               '&&',
                               'mstest',
                               '/testcontainer:%s' % test_container,
                               '/resultsfile:${TARGET}'])

  vsx_test_command = env.Command(
      target='%s_test_results.trx' % package_name,
      source='',
      action=vs_test_action)

  env.Depends(vsx_test_command, [vsx_build_all_command])
  env.AddNodeToTestSuite(vsx_test_command,
                         ['bot'],
                         'run_%s_tests' % package_name,
                         'small')


DefineVSTestSet('NaClVsx.Package', 'dll', 'small')
DefineVSTestSet('MsAd7.BaseImpl', 'dll', 'small')
DefineVSTestSet('dwarf_reader', 'exe', 'small')
