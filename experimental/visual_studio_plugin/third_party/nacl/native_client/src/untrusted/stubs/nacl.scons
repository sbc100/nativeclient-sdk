# Copyright 2008, Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#     * Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


Import('env')

# This directory contains untrusted C and ASM source for low-level
# CPU-specific libraries implicitly supplied by the compiler driver.
# Unlike most untrusted SDK code, conditional compilation may be
# freely used, as the target will never be PNaCl.

if env.get('TARGET_ARCHITECTURE') == 'x86':
  objects = [env.ComponentObject('crt1', ['crt1_x86.S' ]),
             env.ComponentObject('crti', ['crti_x86.S' ]),
             env.ComponentObject('crtn', ['crtn_x86.S' ]),
             ]
  if env.get('TARGET_SUBARCH') == '32':
    objects += [env.ComponentObject('intrinsics', ['intrinsics_x86.S' ]),
                ]
elif env.get('TARGET_ARCHITECTURE') == 'arm':
  objects = [env.ComponentObject('crt1', ['crt1_arm.S']),
             env.ComponentObject('crti', ['crti_arm.S']),
             env.ComponentObject('crtn', ['crtn_arm.S']),
             env.ComponentObject('intrinsics', ['intrinsics_arm.S']),
             ]
else:
  raise Exception, (
    'Unexpected TARGET_ARCHITECTURE: %s' % env.get('TARGET_ARCHITECTURE'))

# Archive library of modules written in C.
crt_platform = env.StaticLibrary('crt_platform',
                                 [env.StaticObject('tls.o', ['tls.c'])])

env.AddObjectToSdk(objects + [crt_platform])
