# -*- python -*-
# Copyright 2008, Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#     * Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


import os
import platform
import sys
Import('env')

if env.Bit('linux'):
    env.Append(
        CCFLAGS=['-fPIC'],
        CPPDEFINES=['XP_UNIX'],
    )

if env.Bit('mac'):
    # there are some issue with compiling ".mm" files
    # TODO(sehr): this should Clone an env specifically for the mm file.
    env.FilterOut(CCFLAGS=['-pedantic'])
    env.Append(
        CPPDEFINES = [
            'XP_MACOSX',
            'XP_UNIX',
            ['TARGET_API_MAC_CARBON', '1'],
            'NO_X11',
            'USE_SYSTEM_CONSOLE',
        ],
    )

if env.Bit('windows'):
    env.Append(
        CCFLAGS = ['/EHsc'],
        CPPDEFINES = ['XP_WIN', 'WIN32', '_WINDOWS'],
    )

nonnacl_util_inputs = [
  'sel_ldr_launcher.cc',
]

if env.Bit('windows'):
  nonnacl_util_inputs += [
      'win/sel_ldr_launcher_win.cc',
  ]
elif env.Bit('linux'):
  nonnacl_util_inputs += [
      'linux/sel_ldr_launcher_linux.cc',
      'linux/get_plugin_dirname.cc',
  ]
elif env.Bit('mac'):
  nonnacl_util_inputs += [
      'linux/sel_ldr_launcher_linux.cc',
      'osx/get_plugin_dirname.mm',
  ]

nonnacl_util_inputs = env.ComponentObject(nonnacl_util_inputs)

nonnacl_util_c_inputs = nonnacl_util_inputs + [ 'sel_ldr_launcher_c.cc' ]

env.ComponentLibrary('nonnacl_util', nonnacl_util_inputs)
env.ComponentLibrary('nonnacl_util_c', nonnacl_util_c_inputs)
