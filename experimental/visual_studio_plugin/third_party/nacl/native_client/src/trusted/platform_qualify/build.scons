# -*- python -*-
# Copyright 2008 The Native Client Authors.  All rights reserved.
# Use of this source code is governed by a BSD-style license that can
# be found in the LICENSE file.

Import('env')


pql_inputs = [];

#
# OS-specific qualification routines
#
if env.Bit('windows'):
  pql_inputs += ['win/nacl_os_qualify.c',
                 'win/nacl_dep_qualify.c']
elif env.Bit('mac'):
  pql_inputs += ['osx/nacl_os_qualify.c',
                 'posix/nacl_dep_qualify.c']
elif env.Bit('linux'):
  pql_inputs += ['linux/nacl_os_qualify.c',
                 'linux/sysv_shm_and_mmap.c',
                 'posix/nacl_dep_qualify.c']



#
# Architecture-specific qualification routines
#
if env['BUILD_ARCHITECTURE'] == 'x86' and env['TARGET_ARCHITECTURE'] == 'x86':
  pql_inputs += ['arch/x86/nacl_cpuwhitelist.c']

  # Make sure CPUID is present and truthful
  vcpuid_env = env.Clone()
  if env.Bit('mac'):
    vcpuid_env.Append(CCFLAGS = ['-mdynamic-no-pic'])
    vcpuid_env.FilterOut(CCFLAGS = ['-fPIC'])
  if env.Bit('linux'):
    vcpuid_env.Append(CCFLAGS = ['-msse3'])
  env.Append(LIBS = ['platform_qual_lib', 'ncvalidate'])
  # TODO(bradchen): need to fix vcpuid to use intrinsics rather than inline
  # assembly code. (Issue 440)
  if env['TARGET_SUBARCH'] == '64' and env.Bit('windows'):
    env.Append(LIBS = ['platform_qual_lib',
                       'ncvalidate'])
  else:
    nacl_vcpuid = vcpuid_env.ComponentLibrary('vcpuid', 'arch/x86/vcpuid.c')
    env.Append(LIBS = ['vcpuid'])

  if env['TARGET_SUBARCH'] == '64':
    # Compile x86-64 primitives for verifying NX functionality
    pql_inputs += ['arch/x86_64/nacl_dep_qualify.c']
  elif env['TARGET_SUBARCH'] == '32':
    pql_inputs += ['arch/x86_32/nacl_dep_qualify.c']

# TODO(bradchen): re-enable when issue 440 is fixed
#  env.ComponentProgram('platform_qual_test',
#                       'arch/x86/platform_qual_test.c')
  env.ComponentProgram('nacl_cpuwhitelist_test',
                       'arch/x86/nacl_cpuwhitelist_test.c')



if env['BUILD_ARCHITECTURE'] == 'arm':
  # Compile ARM primitives for checking XN functionality
  pql_inputs += ['arch/arm/nacl_dep_qualify.c']


# ----------------------------------------------------------
#
# ----------------------------------------------------------
env.ComponentLibrary('platform_qual_lib', pql_inputs)


# These tests use assembly which seem to make the coverage instrumentation
# on windows unhappy. Disable them for now on coverage for windows.
# TODO(bradnelson): figure out a way to get coverage working for these.
if env.Bit('windows') and env.get('COVERAGE_ENABLED'):
  Return()

