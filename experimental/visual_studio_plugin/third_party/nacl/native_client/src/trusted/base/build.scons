# -*- python -*-
#
# Copyright 2009 The Native Client Authors.  All rights reserved.  Use
# of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.


Import('env')

nacl_base_test_exe = env.ComponentProgram('nacl_base_test',
                                          ['nacl_base_test.c'])

node = env.CommandTest(
    'nacl_base_test.out',
    command=[nacl_base_test_exe])
env.AddNodeToTestSuite(node, ['small_tests'])

def FailsGood(exit_status):
  if exit_status:
    return 0
  else:
    return 1

# Compile-time failures in nacl_macros.h only work for gcc right now.
if not env.Bit('windows'):
  fail_compile_env = env.Clone()
  fail_compile_env['CCCOM'] = Action(fail_compile_env['CCCOM'],
                                     exitstatfunc=FailsGood)
  obj = fail_compile_env.ComponentObject('nacl_base_assert_is_array_test',
                                         ['nacl_base_assert_is_array_test.c'])
  fail_compile_env.AlwaysBuild(obj)
  fail_compile_env.Alias('small_tests', obj)
  fail_compile_env.Alias('compile_tests', obj)
  obj = fail_compile_env.Object('nacl_base_array_size_test',
                              ['nacl_base_array_size_test.c'])
  fail_compile_env.AlwaysBuild(obj)
  fail_compile_env.Alias('small_tests', obj)
  fail_compile_env.Alias('compile_tests', obj)

  fail_compile_env = env.Clone()
  fail_compile_env['CCCOM'] = Action(fail_compile_env['CXXCOM'],
                                   exitstatfunc=FailsGood)
  obj = fail_compile_env.ComponentObject('nacl_base_assert_is_array_cpp_test',
                                         ['nacl_base_assert_is_array_test.c'])
  fail_compile_env.AlwaysBuild(obj)
  fail_compile_env.Alias('small_tests', obj)
  fail_compile_env.Alias('compile_tests', obj)
  obj = fail_compile_env.ComponentObject('nacl_base_array_size_cpp_test',
                                         ['nacl_base_array_size_test.c'])
  fail_compile_env.AlwaysBuild(obj)
  fail_compile_env.Alias('small_tests', obj)
  fail_compile_env.Alias('compile_tests', obj)



nacl_min_max_test_exe = env.ComponentProgram('nacl_min_max_test',
                                             ['nacl_min_max_test.c'])

node = env.CommandTest(
    'nacl_min_max_test.out',
    command=[nacl_min_max_test_exe])
env.AddNodeToTestSuite(node, ['small_tests'])

# build nacl_min_max_test.c as a C++ program to make sure that there
# aren't weird operator precedence issues that would cause the min/max
# macros to behave differently
nacl_min_max_env = env.Clone()
nacl_min_max_env['CCCOM'] = Action(nacl_min_max_env['CXXCOM'])
nacl_min_max_cpp_test_obj = nacl_min_max_env.ComponentObject(
    'nacl_min_max_cpp_test',
    ['nacl_min_max_test.c'])
nacl_min_max_cpp_test_exe = nacl_min_max_env.ComponentProgram(
    'nacl_min_max_cpp_test',
    nacl_min_max_cpp_test_obj)
node = env.CommandTest(
    'nacl_min_max_cpp_test.out',
    command=[nacl_min_max_cpp_test_exe])
env.AddNodeToTestSuite(node, ['small_tests'])
