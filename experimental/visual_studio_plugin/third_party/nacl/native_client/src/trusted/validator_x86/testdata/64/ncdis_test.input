# This is a simple test file to see if we have things working.
# When run in self documenting mode and command free lines,
# are echoed to the output.
#
# Lines with command line options (up to and including the pound sign) are
# also copied to output. Application (ncdis) is then run on those options,
# generating corresponding output. It is assume that the text after the
# pound sign is the output generated by ncdis. Hence, this file is self documenting
# in the sense that the input matches the output.
#
# Note: Useful command line options are:
#   -i=XXXXXXXX
#           Specifies a (even length) hexidecimal value defined the sequence
#           of bytess that defines the instruction to translate.
#
#   -pc=XXXXXXXX
#           Specifies the value of the program counter, when it is pointing to the instruction
#           to be decoded. In not specified, the program counter is assumed to be zero.
#
# Note: This file tests x86-64 instructions.

-i=31ed                                                 # 0:	31 ed               	xor %rbp, %rbp

# Check move immediates (b8-bf).
-i=b888776655                                           # 0:	b8 88 77 66 55      	mov %eax, 0x55667788
-i=b988776655                                           # 0:	b9 88 77 66 55      	mov %ecx, 0x55667788
-i=ba88776655                                           # 0:	ba 88 77 66 55      	mov %edx, 0x55667788
-i=bb88776655                                           # 0:	bb 88 77 66 55      	mov %ebx, 0x55667788
-i=bc88776655                                           # 0:	bc 88 77 66 55      	mov %esp, 0x55667788
-i=bd88776655                                           # 0:	bd 88 77 66 55      	mov %ebp, 0x55667788
-i=be88776655                                           # 0:	be 88 77 66 55      	mov %esi, 0x55667788
-i=bf88776655                                           # 0:	bf 88 77 66 55      	mov %edi, 0x55667788

-i=41b844332211                                         # 0:	41 b8 44 33 22 11   	mov %eax, 0x11223344
-i=41bf44332211                                         # 0:	41 bf 44 33 22 11   	mov %edi, 0x11223344

-i=66b88877                                             # 0:	66 b8 88 77         	mov %eax, 0x7788
-i=66b98877                                             # 0:	66 b9 88 77         	mov %ecx, 0x7788
-i=66ba8877                                             # 0:	66 ba 88 77         	mov %edx, 0x7788
-i=66bb8877                                             # 0:	66 bb 88 77         	mov %ebx, 0x7788
-i=66bc8877                                             # 0:	66 bc 88 77         	mov %esp, 0x7788
-i=66bd8877                                             # 0:	66 bd 88 77         	mov %ebp, 0x7788
-i=66be8877                                             # 0:	66 be 88 77         	mov %esi, 0x7788
-i=66bf8877                                             # 0:	66 bf 88 77         	mov %edi, 0x7788

# Note: The following don't print out the proper register name.
-i=6641b82211                                           # 0:	66 41 b8 22 11      	mov %eax, 0x1122
-i=6641bf2211                                           # 0:	66 41 bf 22 11      	mov %edi, 0x1122

-i=67b888776655                                         # 0:	67 b8 88 77 66 55   	mov %eax, 0x55667788
-i=67bf88776655                                         # 0:	67 bf 88 77 66 55   	mov %edi, 0x55667788

# Note: The following read the 64 bit immediate, but don't print them correctly (i.e. a bug)
-i=48b88877665544332211                                 # 0:	48 b8 88 77 66 55 44 33 22 11	mov %eax, 0x55667788
-i=48bf8877665544332211                                 # 0:	48 bf 88 77 66 55 44 33 22 11	mov %edi, 0x55667788

-i=6648b88877665544332211                               # 0:	66 48 b8 88 77 66 55 44 33 22 11	mov %eax, 0x55667788
-i=6648bf8877665544332211                               # 0:	66 48 bf 88 77 66 55 44 33 22 11	mov %edi, 0x55667788

-i=6748b88877665544332211                               # 0:	67 48 b8 88 77 66 55 44 33 22 11	mov %eax, 0x55667788
-i=6748bf8877665544332211                               # 0:	67 48 bf 88 77 66 55 44 33 22 11	mov %edi, 0x55667788

-i=666748ba8877665544332211                             # 0:	66 67 48 ba 88 77 66 55 44 33 22 11	mov %edx, 0x55667788
-i=666748bf8877665544332211                             # 0:	66 67 48 bf 88 77 66 55 44 33 22 11	mov %edi, 0x55667788

# Check direct moves on 32-iit constant addresses.
# Note: output of direct moves only prints four bytes of the constant address.
-i=a08877665544332211                                   # 0:	a0 88 77 66 55 44 33 22 11	mov %al, [0x55667788]
# Note: Should use %ax instead of %rax
-i=66a18877665544332211                                 # 0:	66 a1 88 77 66 55 44 33 22 11	mov %rax, [0x55667788]
# Note: Should use %eax instead of %rax
-i=a18877665544332211                                   # 0:	a1 88 77 66 55 44 33 22 11	mov %rax, [0x55667788]
-i=48a18877665544332211                                 # 0:	48 a1 88 77 66 55 44 33 22 11	mov %rax, [0x55667788]
-i=a28877665544332211                                   # 0:	a2 88 77 66 55 44 33 22 11	mov [0x55667788], %al
# Note: Should use %ax instead of %rax
-i=66a38877665544332211                                 # 0:	66 a3 88 77 66 55 44 33 22 11	mov [0x55667788], %rax
# Note: Should use %eax instead of %rax
-i=a38877665544332211                                   # 0:	a3 88 77 66 55 44 33 22 11	mov [0x55667788], %rax
-i=48a38877665544332211                                 # 0:	48 a3 88 77 66 55 44 33 22 11	mov [0x55667788], %rax
