0000000000000000: 00 c0                                        add %al, %al
  { NoPrefix, {  0x00 }, Add,  NACLi_386L,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeRex) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_b),
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { G_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprUsed | ExprDest | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %al, ExprUsed | ExprSize8 },
};
0000000000000000: 01 c0                                        add %eax, %eax
  { NoPrefix, {  0x01 }, Add,  NACLi_386L,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) | NACL_OPFLAG(OperandZeroExtends_v) },
    { G_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprDest | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
};
0000000000000000: 41 01 c3                                     add %r11d, %eax
  { NoPrefix, {  0x01 }, Add,  NACLi_386L,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) | NACL_OPFLAG(OperandZeroExtends_v) },
    { G_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %r11d, ExprSet | ExprUsed | ExprDest | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
};
0000000000000000: 44 01 d8                                     add %eax, %r11d
  { NoPrefix, {  0x01 }, Add,  NACLi_386L,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) | NACL_OPFLAG(OperandZeroExtends_v) },
    { G_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprDest | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %r11d, ExprUsed | ExprSize32 },
};
0000000000000000: 48 01 c3                                     add %rbx, %rax
  { NoPrefix, {  0x01 }, Add,  NACLi_386L,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { G_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %rbx, ExprSet | ExprUsed | ExprDest | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
};
0000000000000000: 67 03 18                                     add %ebx, [%eax]
  { NoPrefix, {  0x03 }, Add,  NACLi_386L,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    { G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) | NACL_OPFLAG(OperandZeroExtends_v) },
    { E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %ebx, ExprSet | ExprUsed | ExprDest | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: 02 04 00                                     add %al, [%rax+%rax*1]
  { NoPrefix, {  0x02 }, Add,  NACLi_386L,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeRex) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_b),
    { G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprUsed | ExprDest | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: 67 02 04 00                                  add %al, [%eax+%eax*1]
  { NoPrefix, {  0x02 }, Add,  NACLi_386L,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeRex) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_b),
    { G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprUsed | ExprDest | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: 48 83 ec 08                                  sub %rsp, 0x8
  { NoPrefix, {  0x83 }, Sub,  NACLi_386L,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeHasImmed_b) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    { Opcode5, NACL_OPFLAG(OperandExtendsOpcode) },
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { I_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprDest | ExprSize64 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x8, ExprUsed | ExprSize8 | ExprUnsignedHex },
};
00000000004003d4: e8 83 00 00 00                               call 0x40045c
  { NoPrefix, {  0xe8 }, Call,  NACLi_JMPZ,
    NACL_IFLAG(OpcodeHasImmed) | NACL_IFLAG(OperandSize_v),
    { RegREIP, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegRESP, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { J_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OperandNear) | NACL_OPFLAG(OperandRelative) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rip, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x40045c, ExprUsed | ExprUnsignedHex | ExprJumpTarget },
};
00000000004003de: e8 7d 05 00 00                               call 0x400960
  { NoPrefix, {  0xe8 }, Call,  NACLi_JMPZ,
    NACL_IFLAG(OpcodeHasImmed) | NACL_IFLAG(OperandSize_v),
    { RegREIP, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegRESP, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { J_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OperandNear) | NACL_OPFLAG(OperandRelative) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rip, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x400960, ExprUsed | ExprUnsignedHex | ExprJumpTarget },
};
0000000000000000: c3                                           ret
  { NoPrefix, {  0xc3 }, Ret,  NACLi_RETURN,
    NACL_EMPTY_IFLAGS,
    { RegREIP, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegRESP, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rip, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
};
0000000000000000: ff 35 ea 0d 20 00                            push [%rip+0x200dea]
  { NoPrefix, {  0xff }, Push,  NACLi_386,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o) | NACL_IFLAG(OperandSizeDefaultIs64),
    { Opcode6, NACL_OPFLAG(OperandExtendsOpcode) },
    { RegRSP, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 2, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rip, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x200dea, ExprSize32 | ExprSignedHex },
};
0000000000000000: ff 25 ec 0d 20 00                            jmp [%rip+0x200dec]
  { NoPrefix, {  0xff }, Jmp,  NACLi_INDIRECT,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o) | NACL_IFLAG(OperandSizeForce64),
    { Opcode4, NACL_OPFLAG(OperandExtendsOpcode) },
    { RegRIP, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OperandNear) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rip, ExprSet | ExprSize64 },
  { OperandReference[1] , 2, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 | ExprJumpTarget },
  { ExprRegister[0] , %rip, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x200dec, ExprSize32 | ExprSignedHex },
};
0000000000000000: 0f 1f 40 00                                  nop
  { NoPrefix, {  0x1f }, Nop,  NACLi_386,
    NACL_EMPTY_IFLAGS,
  };
NaClExpVector[0] = {
};
0000000000000000: 68 00 00 00 00                               push 0x0
  { NoPrefix, {  0x68 }, Push,  NACLi_386,
    NACL_IFLAG(OpcodeHasImmed_v) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o) | NACL_IFLAG(OperandSizeDefaultIs64),
    { RegRESP, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { I_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprConstant[0] , 0x0, ExprUsed | ExprSize32 | ExprUnsignedHex },
};
0000000000400403: e9 e0 ff ff ff                               jmp 0x4003e8
  { NoPrefix, {  0xe9 }, Jmp,  NACLi_JMPZ,
    NACL_IFLAG(OpcodeHasImmed_v) | NACL_IFLAG(Opcode64Only),
    { RegREIP, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { J_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OperandNear) | NACL_OPFLAG(OperandRelative) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rip, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprConstant[0] , 0x4003e8, ExprUsed | ExprUnsignedHex | ExprJumpTarget },
};
0000000000000000: 49 89 d1                                     mov %r9, %rdx
  { NoPrefix, {  0x89 }, Mov,  NACLi_386,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    { E_Operand, NACL_OPFLAG(OpSet) },
    { G_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %r9, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %rdx, ExprUsed | ExprSize64 },
};
0000000000000000: 5e                                           pop %rsi
  { NoPrefix, {  0x5e }, Pop,  NACLi_386,
    NACL_IFLAG(OpcodePlusR) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o) | NACL_IFLAG(OperandSizeDefaultIs64),
    { OpcodeBaseMinus6, NACL_OPFLAG(OperandExtendsOpcode) },
    { RegRSP, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { G_OpcodeBase, NACL_OPFLAG(OpSet) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 2, 0 },
  { ExprRegister[0] , %rsi, ExprSet | ExprSize64 },
};
0000000000000000: 49 c7 c0 c0 08 40 00                         mov %r8, 0x4008c0
  { NoPrefix, {  0xc7 }, Mov,  NACLi_386,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeHasImmed_v) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    { Opcode0, NACL_OPFLAG(OperandExtendsOpcode) },
    { E_Operand, NACL_OPFLAG(OpSet) },
    { I_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %r8, ExprSet | ExprSize64 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x4008c0, ExprUsed | ExprSize32 | ExprUnsignedHex },
};
0000000000000000: f4                                           hlt
  { NoPrefix, {  0xf4 }, Hlt,  NACLi_386,
    NACL_EMPTY_IFLAGS,
  };
NaClExpVector[0] = {
};
0000000000000000: 48 8b 05 61 0d 20 00                         mov %rax, [%rip+0x200d61]
  { NoPrefix, {  0x8b }, Mov,  NACLi_386,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    { G_Operand, NACL_OPFLAG(OpSet) },
    { E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %rax, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rip, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x200d61, ExprSize32 | ExprSignedHex },
};
0000000000000000: 48 85 c0                                     test %rax, %rax
  { NoPrefix, {  0x85 }, Test,  NACLi_386,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    { E_Operand, NACL_OPFLAG(OpUse) },
    { G_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
};
000000000040046a: 74 02                                        jz 0x40046e
  { NoPrefix, {  0x74 }, Jz,  NACLi_JMP8,
    NACL_IFLAG(OpcodeHasImmed) | NACL_IFLAG(OperandSize_b),
    { RegREIP, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { J_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OperandNear) | NACL_OPFLAG(OperandRelative) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rip, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprConstant[0] , 0x40046e, ExprUsed | ExprUnsignedHex | ExprJumpTarget },
};
0000000000000000: ff d0                                        call %rax
  { NoPrefix, {  0xff }, Call,  NACLi_INDIRECT,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o) | NACL_IFLAG(OperandSizeForce64),
    { Opcode2, NACL_OPFLAG(OperandExtendsOpcode) },
    { RegRIP, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegRSP, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OperandNear) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rip, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 2, ExprImplicit },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 3, 0 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 | ExprJumpTarget },
};
000000000040048d: eb 24                                        jmp 0x4004b3
  { NoPrefix, {  0xeb }, Jmp,  NACLi_JMP8,
    NACL_IFLAG(OpcodeHasImmed) | NACL_IFLAG(OperandSize_b),
    { RegREIP, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { J_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OperandNear) | NACL_OPFLAG(OperandRelative) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rip, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprConstant[0] , 0x4004b3, ExprUsed | ExprUnsignedHex | ExprJumpTarget },
};
0000000000000000: c9                                           leave
  { NoPrefix, {  0xc9 }, Leave,  NACLi_386,
    NACL_EMPTY_IFLAGS,
    { RegREBP, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegRESP, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rbp, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
};
0000000000000000: 66 66 2e 0f 1f 84 00 00 00 00 00             nop
  { NoPrefix, {  0x1f }, Nop,  NACLi_386,
    NACL_EMPTY_IFLAGS,
  };
NaClExpVector[0] = {
};
0000000000000000: b8 00 00 00 00                               mov %eax, 0x0
  { NoPrefix, {  0xb8 }, Mov,  NACLi_386,
    NACL_IFLAG(OpcodeHasImmed) | NACL_IFLAG(OpcodePlusR) | NACL_IFLAG(OperandSize_v),
    { OpcodeBaseMinus0, NACL_OPFLAG(OperandExtendsOpcode) },
    { G_OpcodeBase, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OperandZeroExtends_v) },
    { I_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprSize32 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x0, ExprUsed | ExprSize32 | ExprUnsignedHex },
};
0000000000000000: bf 20 10 60 00                               mov %edi, 0x601020
  { NoPrefix, {  0xbf }, Mov,  NACLi_386,
    NACL_IFLAG(OpcodeHasImmed) | NACL_IFLAG(OpcodePlusR) | NACL_IFLAG(OperandSize_v),
    { OpcodeBaseMinus7, NACL_OPFLAG(OperandExtendsOpcode) },
    { G_OpcodeBase, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OperandZeroExtends_v) },
    { I_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %edi, ExprSet | ExprSize32 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x601020, ExprUsed | ExprSize32 | ExprUnsignedHex },
};
0000000000000000: 48 8b 04 c5 a0 13 60 00                      mov %rax, [%rax*8+0x6013a0]
  { NoPrefix, {  0x8b }, Mov,  NACLi_386,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    { G_Operand, NACL_OPFLAG(OpSet) },
    { E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %rax, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprConstant[0] , 8, ExprSize8 },
  { ExprConstant[0] , 0x6013a0, ExprSize32 | ExprSignedHex },
};
0000000000000000: 89 7d fc                                     mov [%rbp-0x4], %edi
  { NoPrefix, {  0x89 }, Mov,  NACLi_386,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    { E_Operand, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OperandZeroExtends_v) },
    { G_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprSize64 },
  { ExprRegister[0] , %rbp, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , -0x4, ExprSize8 | ExprSignedHex },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %edi, ExprUsed | ExprSize32 },
};
0000000000000000: 3b 45 fc                                     cmp %eax, [%rbp-0x4]
  { NoPrefix, {  0x3b }, Cmp,  NACLi_386,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    { G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpDest) | NACL_OPFLAG(OperandZeroExtends_v) },
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpDest) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %eax, ExprUsed | ExprDest | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprDest | ExprSize64 },
  { ExprRegister[0] , %rbp, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , -0x4, ExprSize8 | ExprSignedHex },
};
0000000000000000: 83 7d f8 08                                  cmp [%rbp-0x8], 0x8
  { NoPrefix, {  0x83 }, Cmp,  NACLi_386L,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeHasImmed_b) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_v),
    { Opcode7, NACL_OPFLAG(OperandExtendsOpcode) },
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpDest) | NACL_OPFLAG(OperandZeroExtends_v) },
    { I_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpDest) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprDest | ExprSize64 },
  { ExprRegister[0] , %rbp, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , -0x8, ExprSize8 | ExprSignedHex },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x8, ExprUsed | ExprDest | ExprSize8 | ExprUnsignedHex },
};
0000000000000000: 8b 45 fc                                     mov %eax, [%rbp-0x4]
  { NoPrefix, {  0x8b }, Mov,  NACLi_386,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    { G_Operand, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OperandZeroExtends_v) },
    { E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rbp, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , -0x4, ExprSize8 | ExprSignedHex },
};
0000000000000000: 41 d3 e4                                     shl %r12d, %cl
  { NoPrefix, {  0xd3 }, Shl,  NACLi_OPINMRM,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OperandSize_v),
    { Opcode4, NACL_OPFLAG(OperandExtendsOpcode) },
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
    { RegCL, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %r12d, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 2, 0 },
  { ExprRegister[0] , %cl, ExprUsed | ExprSize8 },
};
0000000000000000: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00    nop
  { NoPrefix, {  0x1f }, Nop,  NACLi_386,
    NACL_EMPTY_IFLAGS,
  };
NaClExpVector[0] = {
};
0000000000000000: 48 c1 fd 03                                  sar %rbp, 0x3
  { NoPrefix, {  0xc1 }, Sar,  NACLi_OPINMRM,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeHasImmed_b) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    { Opcode7, NACL_OPFLAG(OperandExtendsOpcode) },
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
    { I_Operand, NACL_EMPTY_OPFLAGS },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %rbp, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x3, ExprSize8 | ExprUnsignedHex },
};
0000000000000000: 48 8d 2d 0f 07 20 00                         lea %rbp, [%rip+0x20070f]
  { NoPrefix, {  0x8d }, Lea,  NACLi_386,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeLtC0InModRm) | NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    { G_Operand, NACL_OPFLAG(OpSet) },
    { M_Operand, NACL_OPFLAG(OpAddress) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %rbp, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprAddress | ExprSize64 },
  { ExprRegister[0] , %rip, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x20070f, ExprSize32 | ExprSignedHex },
};
0000000000000000: a0 88 77 66 55 44 33 22 11                   mov %al, [0x1122334455667788]
  { NoPrefix, {  0xa0 }, Mov,  NACLi_386,
    NACL_IFLAG(OpcodeHasImmed_Addr) | NACL_IFLAG(OperandSize_b),
    { RegAL, NACL_OPFLAG(OpSet) },
    { O_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[10] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant64[2] , 0x1122334455667788, ExprSize64 | ExprUnsignedHex },
  { ExprConstant[0] , 0x55667788, ExprUnsignedHex },
  { ExprConstant[0] , 0x11223344, ExprUnsignedHex },
};
0000000000000000: 66 a1 88 77 66 55 44 33 22 11                mov %ax, [0x1122334455667788]
  { NoPrefix, {  0xa1 }, Mov,  NACLi_386,
    NACL_IFLAG(OpcodeHasImmed_Addr) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    { RegREAX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OperandZeroExtends_v) },
    { O_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[10] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %ax, ExprSet | ExprSize16 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant64[2] , 0x1122334455667788, ExprSize64 | ExprUnsignedHex },
  { ExprConstant[0] , 0x55667788, ExprUnsignedHex },
  { ExprConstant[0] , 0x11223344, ExprUnsignedHex },
};
0000000000000000: a2 88 77 66 55 44 33 22 11                   mov [0x1122334455667788], %al
  { NoPrefix, {  0xa2 }, Mov,  NACLi_386,
    NACL_IFLAG(OpcodeHasImmed_Addr) | NACL_IFLAG(OperandSize_b),
    { O_Operand, NACL_OPFLAG(OpSet) },
    { RegAL, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[10] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant64[2] , 0x1122334455667788, ExprSize64 | ExprUnsignedHex },
  { ExprConstant[0] , 0x55667788, ExprUnsignedHex },
  { ExprConstant[0] , 0x11223344, ExprUnsignedHex },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %al, ExprUsed | ExprSize8 },
};
0000000000000000: 66 a3 88 77 66 55 44 33 22 11                mov [0x1122334455667788], %ax
  { NoPrefix, {  0xa3 }, Mov,  NACLi_386,
    NACL_IFLAG(OpcodeHasImmed_Addr) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    { O_Operand, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OperandZeroExtends_v) },
    { RegREAX, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[10] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant64[2] , 0x1122334455667788, ExprSize64 | ExprUnsignedHex },
  { ExprConstant[0] , 0x55667788, ExprUnsignedHex },
  { ExprConstant[0] , 0x11223344, ExprUnsignedHex },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %ax, ExprUsed | ExprSize16 },
};
0000000000000000: 48 b8 88 77 66 55 44 33 22 11                mov %rax, 0x1122334455667788
  { NoPrefix, {  0xb8 }, Mov,  NACLi_386,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeHasImmed) | NACL_IFLAG(OpcodePlusR) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    { OpcodeBaseMinus0, NACL_OPFLAG(OperandExtendsOpcode) },
    { G_OpcodeBase, NACL_OPFLAG(OpSet) },
    { I_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %rax, ExprSet | ExprSize64 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant64[2] , 0x1122334455667788, ExprUsed | ExprSize64 | ExprUnsignedHex },
  { ExprConstant[0] , 0x55667788, ExprUnsignedHex },
  { ExprConstant[0] , 0x11223344, ExprUnsignedHex },
};
0000000000000000: 44 8a 04 00                                  mov %r8b, [%rax+%rax*1]
  { NoPrefix, {  0x8a }, Mov,  NACLi_386,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeRex) | NACL_IFLAG(OperandSize_b),
    { G_Operand, NACL_OPFLAG(OpSet) },
    { E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %r8b, ExprSet | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: 8a 44 05 00                                  mov %al, [%rbp+%rax*1]
  { NoPrefix, {  0x8a }, Mov,  NACLi_386,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeRex) | NACL_IFLAG(OperandSize_b),
    { G_Operand, NACL_OPFLAG(OpSet) },
    { E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rbp, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x0, ExprSize8 | ExprSignedHex },
};
0000000000000000: 42 8a 04 20                                  mov %al, [%rax+%r12*1]
  { NoPrefix, {  0x8a }, Mov,  NACLi_386,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeRex) | NACL_IFLAG(OperandSize_b),
    { G_Operand, NACL_OPFLAG(OpSet) },
    { E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %r12, ExprUsed | ExprSize64 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: 41 8a 44 05 00                               mov %al, [%r13+%rax*1]
  { NoPrefix, {  0x8a }, Mov,  NACLi_386,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeRex) | NACL_IFLAG(OperandSize_b),
    { G_Operand, NACL_OPFLAG(OpSet) },
    { E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %r13, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x0, ExprSize8 | ExprSignedHex },
};
0000000000000000: 0f 38 08 2c 25 00 00 00 00                   psignb %mmx5, [0x0]
  { Prefix0F38, {  0x0f, 0x38, 0x08 }, Psignb,  NACLi_SSSE3,
    NACL_IFLAG(OpcodeUsesModRm),
    { Mmx_G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { Mmx_E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %mmx5, ExprSet | ExprUsed | ExprDest },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x0, ExprSize32 | ExprSignedHex },
};
0000000000000000: 66 0f 38 08 2c 25 00 00 00 00                psignb %xmm5, [0x0]
  { Prefix660F38, {  0x0f, 0x38, 0x08 }, Psignb,  NACLi_SSSE3,
    NACL_IFLAG(OpcodeUsesModRm),
    { Xmm_G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { Xmm_E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %xmm5, ExprSet | ExprUsed | ExprDest },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x0, ExprSize32 | ExprSignedHex },
};
0000000000000000: 66 44 0f 38 08 2c 00                         psignb %xmm13, [%rax+%rax*1]
  { Prefix660F38, {  0x0f, 0x38, 0x08 }, Psignb,  NACLi_SSSE3,
    NACL_IFLAG(OpcodeUsesModRm),
    { Xmm_G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { Xmm_E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %xmm13, ExprSet | ExprUsed | ExprDest },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: dd 24 00                                     frstor [%rax+%rax*1]
  { NoPrefix, {  0xdd }, Frstor,  NACLi_X87,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLtC0InModRm),
    { Opcode4, NACL_OPFLAG(OperandExtendsOpcode) },
    { M_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: 67 dd 24 00                                  frstor [%eax+%eax*1]
  { NoPrefix, {  0xdd }, Frstor,  NACLi_X87,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLtC0InModRm),
    { Opcode4, NACL_OPFLAG(OperandExtendsOpcode) },
    { M_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: dc c1                                        fadd %st1, %st0
  { PrefixDC, {  0xdc, 0xc1 }, Fadd,  NACLi_X87,
    NACL_IFLAG(OpcodePlusR),
    { OpcodeBaseMinus1, NACL_OPFLAG(OperandExtendsOpcode) },
    { St_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
    { RegST0, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %st1, ExprSet | ExprUsed },
  { OperandReference[1] , 2, 0 },
  { ExprRegister[0] , %st0, ExprUsed },
};
0000000000000000: d8 74 24 10                                  fdiv %st0, [%rsp+0x10]
  { NoPrefix, {  0xd8 }, Fdiv,  NACLi_X87,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLtC0InModRm),
    { Opcode6, NACL_OPFLAG(OperandExtendsOpcode) },
    { RegST0, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
    { M_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %st0, ExprSet | ExprUsed },
  { OperandReference[1] , 2, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rsp, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x10, ExprSize8 | ExprSignedHex },
};
0000000000000000: 67 d8 74 24 10                               fdiv %st0, [%esp+0x10]
  { NoPrefix, {  0xd8 }, Fdiv,  NACLi_X87,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLtC0InModRm),
    { Opcode6, NACL_OPFLAG(OperandExtendsOpcode) },
    { RegST0, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
    { M_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %st0, ExprSet | ExprUsed },
  { OperandReference[1] , 2, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %esp, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x10, ExprSize8 | ExprSignedHex },
};
0000000000000000: dc 44 00 04                                  fadd %st0, [%rax+%rax*1+0x4]
  { NoPrefix, {  0xdc }, Fadd,  NACLi_X87,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLtC0InModRm),
    { Opcode0, NACL_OPFLAG(OperandExtendsOpcode) },
    { RegST0, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
    { M_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %st0, ExprSet | ExprUsed },
  { OperandReference[1] , 2, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x4, ExprSize8 | ExprSignedHex },
};
0000000000000000: da 04 25 04 00 00 00                         fiadd %st0, [0x4]
  { NoPrefix, {  0xda }, Fiadd,  NACLi_X87,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLtC0InModRm),
    { Opcode0, NACL_OPFLAG(OperandExtendsOpcode) },
    { RegST0, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
    { M_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %st0, ExprSet | ExprUsed },
  { OperandReference[1] , 2, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x4, ExprSize32 | ExprSignedHex },
};
0000000000000000: da 70 04                                     fidiv %st0, [%rax+0x4]
  { NoPrefix, {  0xda }, Fidiv,  NACLi_X87,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLtC0InModRm),
    { Opcode6, NACL_OPFLAG(OperandExtendsOpcode) },
    { RegST0, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
    { M_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %st0, ExprSet | ExprUsed },
  { OperandReference[1] , 2, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x4, ExprSize8 | ExprSignedHex },
};
0000000000000000: de 50 04                                     ficom %st0, [%rax+0x4]
  { NoPrefix, {  0xde }, Ficom,  NACLi_X87,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLtC0InModRm),
    { Opcode2, NACL_OPFLAG(OperandExtendsOpcode) },
    { RegST0, NACL_OPFLAG(OpUse) },
    { M_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %st0, ExprUsed },
  { OperandReference[1] , 2, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x4, ExprSize8 | ExprSignedHex },
};
0000000000000000: dc e5                                        fsubr %st5, %st0
  { PrefixDC, {  0xdc, 0xe5 }, Fsubr,  NACLi_X87,
    NACL_IFLAG(OpcodePlusR),
    { OpcodeBaseMinus5, NACL_OPFLAG(OperandExtendsOpcode) },
    { St_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
    { RegST0, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %st5, ExprSet | ExprUsed },
  { OperandReference[1] , 2, 0 },
  { ExprRegister[0] , %st0, ExprUsed },
};
0000000000000000: dc f3                                        fdivr %st3, %st0
  { PrefixDC, {  0xdc, 0xf3 }, Fdivr,  NACLi_X87,
    NACL_IFLAG(OpcodePlusR),
    { OpcodeBaseMinus3, NACL_OPFLAG(OperandExtendsOpcode) },
    { St_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
    { RegST0, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %st3, ExprSet | ExprUsed },
  { OperandReference[1] , 2, 0 },
  { ExprRegister[0] , %st0, ExprUsed },
};
0000000000000000: dc ea                                        fsub %st2, %st0
  { PrefixDC, {  0xdc, 0xea }, Fsub,  NACLi_X87,
    NACL_IFLAG(OpcodePlusR),
    { OpcodeBaseMinus2, NACL_OPFLAG(OperandExtendsOpcode) },
    { St_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
    { RegST0, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %st2, ExprSet | ExprUsed },
  { OperandReference[1] , 2, 0 },
  { ExprRegister[0] , %st0, ExprUsed },
};
0000000000000000: dc ce                                        fmul %st6, %st0
  { PrefixDC, {  0xdc, 0xce }, Fmul,  NACLi_X87,
    NACL_IFLAG(OpcodePlusR),
    { OpcodeBaseMinus6, NACL_OPFLAG(OperandExtendsOpcode) },
    { St_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
    { RegST0, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %st6, ExprSet | ExprUsed },
  { OperandReference[1] , 2, 0 },
  { ExprRegister[0] , %st0, ExprUsed },
};
0000000000000000: 48 63 c6                                     movsxd %rax, %esi
  { NoPrefix, {  0x63 }, Movsxd,  NACLi_386,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    { G_Operand, NACL_OPFLAG(OpSet) },
    { Ev_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %rax, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %esi, ExprUsed | ExprSize32 },
};
0000000000000000: 63 c6                                        movsxd %eax, %esi; *NACL Disallows!*
  { NoPrefix, {  0x63 }, Movsxd,  NACLi_ILLEGAL,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_v),
    { G_Operand, NACL_OPFLAG(OpSet) },
    { E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %esi, ExprUsed | ExprSize32 },
};
0000000000000000: 6c                                           insb; *NACL Disallows!*
  { NoPrefix, {  0x6c }, Insb,  NACLi_ILLEGAL,
    NACL_IFLAG(OperandSize_b),
    { RegES_EDI, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegDX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprSet | ExprSize64 },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %dx, ExprUsed | ExprSize16 },
};
0000000000000000: 6d                                           insd; *NACL Disallows!*
  { NoPrefix, {  0x6d }, Insd,  NACLi_ILLEGAL,
    NACL_IFLAG(OperandSize_v),
    { RegES_EDI, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegDX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprSet | ExprSize64 },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %dx, ExprUsed | ExprSize16 },
};
0000000000000000: 66 6d                                        insw; *NACL Disallows!*
  { NoPrefix, {  0x6d }, Insw,  NACLi_ILLEGAL,
    NACL_IFLAG(OperandSize_w),
    { RegES_EDI, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegDX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprSet | ExprSize64 },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %dx, ExprUsed | ExprSize16 },
};
0000000000000000: 6e                                           outsb; *NACL Disallows!*
  { NoPrefix, {  0x6e }, Outsb,  NACLi_ILLEGAL,
    NACL_IFLAG(OperandSize_b),
    { RegDX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
    { RegES_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %dx, ExprUsed | ExprSize16 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: 6f                                           outsd; *NACL Disallows!*
  { NoPrefix, {  0x6f }, Outsd,  NACLi_ILLEGAL,
    NACL_IFLAG(OperandSize_v),
    { RegDX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
    { RegES_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %dx, ExprUsed | ExprSize16 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: 66 6f                                        outsw; *NACL Disallows!*
  { NoPrefix, {  0x6f }, Outsw,  NACLi_ILLEGAL,
    NACL_IFLAG(OperandSize_w),
    { RegDX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
    { RegES_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %dx, ExprUsed | ExprSize16 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: 66 98                                        cbw
  { NoPrefix, {  0x98 }, Cbw,  NACLi_386,
    NACL_IFLAG(OperandSize_w),
    { RegAX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegAL, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %ax, ExprSet | ExprSize16 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %al, ExprUsed | ExprSize8 },
};
0000000000000000: 98                                           cwde
  { NoPrefix, {  0x98 }, Cwde,  NACLi_386,
    NACL_IFLAG(OperandSize_v),
    { RegEAX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %eax, ExprSet | ExprSize32 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %ax, ExprUsed | ExprSize16 },
};
0000000000000000: 48 98                                        cdqe
  { NoPrefix, {  0x98 }, Cdqe,  NACLi_386,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    { RegRAX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) | NACL_OPFLAG(OperandSignExtends_v) },
    { RegEAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rax, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
};
0000000000000000: 66 99                                        cwd
  { NoPrefix, {  0x99 }, Cwd,  NACLi_386,
    NACL_IFLAG(OperandSize_w),
    { RegDX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegAX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %dx, ExprSet | ExprSize16 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %ax, ExprSet | ExprSize16 },
  { OperandReference[1] , 2, ExprImplicit },
  { ExprRegister[0] , %ax, ExprUsed | ExprSize16 },
};
0000000000000000: 99                                           cdq
  { NoPrefix, {  0x99 }, Cdq,  NACLi_386,
    NACL_IFLAG(OperandSize_v),
    { RegEDX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegEAX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegEAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %edx, ExprSet | ExprSize32 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %eax, ExprSet | ExprSize32 },
  { OperandReference[1] , 2, ExprImplicit },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
};
0000000000000000: 48 99                                        cqo
  { NoPrefix, {  0x99 }, Cqo,  NACLi_386,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    { RegRDX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegRAX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegRAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rdx, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rax, ExprSet | ExprSize64 },
  { OperandReference[1] , 2, ExprImplicit },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
};
0000000000000000: 86 c2                                        xchg %dl, %al
  { NoPrefix, {  0x86 }, Xchg,  NACLi_386L,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeRex) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_b),
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %dl, ExprSet | ExprUsed | ExprDest | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprUsed | ExprSize8 },
};
0000000000000000: 86 40 20                                     xchg [%rax+0x20], %al
  { NoPrefix, {  0x86 }, Xchg,  NACLi_386L,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeRex) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_b),
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprUsed | ExprDest | ExprSize64 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x20, ExprSize8 | ExprSignedHex },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprUsed | ExprSize8 },
};
0000000000000000: 87 40 20                                     xchg [%rax+0x20], %eax
  { NoPrefix, {  0x87 }, Xchg,  NACLi_386L,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprUsed | ExprDest | ExprSize64 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x20, ExprSize8 | ExprSignedHex },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprSize32 },
};
0000000000000000: a6                                           cmpsb
  { NoPrefix, {  0xa6 }, Cmpsb,  NACLi_386RE,
    NACL_IFLAG(OperandSize_b),
    { RegES_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
    { RegDS_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %ds, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: 66 a7                                        cmpsw
  { NoPrefix, {  0xa7 }, Cmpsw,  NACLi_386RE,
    NACL_IFLAG(OperandSize_w),
    { RegES_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
    { RegDS_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %ds, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: a7                                           cmpsd
  { NoPrefix, {  0xa7 }, Cmpsd,  NACLi_386RE,
    NACL_IFLAG(OperandSize_v),
    { RegES_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
    { RegDS_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %ds, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: 48 a7                                        cmpsq
  { NoPrefix, {  0xa7 }, Cmpsq,  NACLi_386RE,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    { RegES_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
    { RegDS_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %ds, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: aa                                           stosb
  { NoPrefix, {  0xaa }, Stosb,  NACLi_386R,
    NACL_IFLAG(OperandSize_b),
    { RegES_EDI, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegAL, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprSet | ExprSize64 },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %al, ExprUsed | ExprSize8 },
};
0000000000000000: ab                                           stosd
  { NoPrefix, {  0xab }, Stosd,  NACLi_386R,
    NACL_IFLAG(OperandSize_v),
    { RegES_EDI, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegEAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprSet | ExprSize64 },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
};
0000000000000000: 66 ab                                        stosw
  { NoPrefix, {  0xab }, Stosw,  NACLi_386R,
    NACL_IFLAG(OperandSize_w),
    { RegES_EDI, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprSet | ExprSize64 },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %ax, ExprUsed | ExprSize16 },
};
0000000000000000: 48 ab                                        stosq
  { NoPrefix, {  0xab }, Stosq,  NACLi_386R,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    { RegES_EDI, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegRAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprSet | ExprSize64 },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
};
0000000000000000: a4                                           movsb
  { NoPrefix, {  0xa4 }, Movsb,  NACLi_386R,
    NACL_IFLAG(OperandSize_b),
    { RegES_EDI, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegDS_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprSet | ExprSize64 },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %ds, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: 66 a5                                        movsw
  { NoPrefix, {  0xa5 }, Movsw,  NACLi_386R,
    NACL_IFLAG(OperandSize_w),
    { RegES_EDI, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegDS_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprSet | ExprSize64 },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %ds, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: a5                                           movsd
  { NoPrefix, {  0xa5 }, Movsd,  NACLi_386R,
    NACL_IFLAG(OperandSize_v),
    { RegES_EDI, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegDS_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprSet | ExprSize64 },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %ds, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: 48 a5                                        movsq
  { NoPrefix, {  0xa5 }, Movsq,  NACLi_386R,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    { RegES_EDI, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegDS_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprSet | ExprSize64 },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %ds, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: 9c                                           pushfq; *NACL Disallows!*
  { NoPrefix, {  0x9c }, Pushfq,  NACLi_ILLEGAL,
    NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o) | NACL_IFLAG(OperandSizeDefaultIs64),
    { RegRSP, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
  };
NaClExpVector[2] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
};
0000000000000000: 9d                                           popfq; *NACL Disallows!*
  { NoPrefix, {  0x9d }, Popfq,  NACLi_ILLEGAL,
    NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_v),
    { RegRSP, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
  };
NaClExpVector[2] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
};
0000000000000000: ac                                           lodsb; *NACL Disallows!*
  { NoPrefix, {  0xac }, Lodsb,  NACLi_ILLEGAL,
    NACL_IFLAG(OperandSize_b),
    { RegAL, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegDS_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %al, ExprSet | ExprSize8 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %ds, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: ad                                           lodsd; *NACL Disallows!*
  { NoPrefix, {  0xad }, Lodsd,  NACLi_ILLEGAL,
    NACL_IFLAG(OperandSize_v),
    { RegEAX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegDS_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %eax, ExprSet | ExprSize32 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %ds, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: 66 ad                                        lodsw; *NACL Disallows!*
  { NoPrefix, {  0xad }, Lodsw,  NACLi_ILLEGAL,
    NACL_IFLAG(OperandSize_w),
    { RegAX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegDS_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %ax, ExprSet | ExprSize16 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %ds, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: 48 ad                                        lodsq; *NACL Disallows!*
  { NoPrefix, {  0xad }, Lodsq,  NACLi_ILLEGAL,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    { RegRAX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegDS_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rax, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %ds, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: ae                                           scasb
  { NoPrefix, {  0xae }, Scasb,  NACLi_386RE,
    NACL_IFLAG(OperandSize_b),
    { RegAL, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
    { RegDS_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %al, ExprUsed | ExprSize8 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %ds, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: af                                           scasd
  { NoPrefix, {  0xaf }, Scasd,  NACLi_386RE,
    NACL_IFLAG(OperandSize_v),
    { RegEAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
    { RegDS_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %ds, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: 66 af                                        scasw
  { NoPrefix, {  0xaf }, Scasw,  NACLi_386RE,
    NACL_IFLAG(OperandSize_w),
    { RegAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
    { RegDS_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %ax, ExprUsed | ExprSize16 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %ds, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: 48 af                                        scasq
  { NoPrefix, {  0xaf }, Scasq,  NACLi_386RE,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    { RegRAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
    { RegDS_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %ds, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: c8 2c 01 00                                  enter 0x12c, 0x0; *NACL Disallows!*
  { NoPrefix, {  0xc8 }, Enter,  NACLi_ILLEGAL,
    NACL_IFLAG(OpcodeHasImmed_w) | NACL_IFLAG(OpcodeHasImmed2_b),
    { I_Operand, NACL_OPFLAG(OpUse) },
    { I2_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprConstant[0] , 0x12c, ExprUsed | ExprSize16 | ExprUnsignedHex },
  { OperandReference[1] , 1, 0 },
  { ExprConstant[0] , 0x0, ExprUsed | ExprSize8 | ExprUnsignedHex },
};
0000000000000000: 80 e4 df                                     and %ah, 0xdf
  { NoPrefix, {  0x80 }, And,  NACLi_386L,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeHasImmed) | NACL_IFLAG(OpcodeRex) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_b),
    { Opcode4, NACL_OPFLAG(OperandExtendsOpcode) },
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { I_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %ah, ExprSet | ExprUsed | ExprDest | ExprSize8 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0xdf, ExprUsed | ExprSize8 | ExprUnsignedHex },
};
0000000000000000: 22 24 25 df 00 00 00                         and %ah, [0xdf]
  { NoPrefix, {  0x22 }, And,  NACLi_386L,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeRex) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_b),
    { G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %ah, ExprSet | ExprUsed | ExprDest | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0xdf, ExprSize32 | ExprSignedHex },
};
0000000000000000: 40 22 24 25 df 00 00 00                      and %spl, [0xdf]
  { NoPrefix, {  0x22 }, And,  NACLi_386L,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeRex) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_b),
    { G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %spl, ExprSet | ExprUsed | ExprDest | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0xdf, ExprSize32 | ExprSignedHex },
};
0000000000000000: 8d 04 85 ff ff ff ff                         lea %eax, [%rax*4-0x1]
  { NoPrefix, {  0x8d }, Lea,  NACLi_386,
    NACL_IFLAG(OpcodeLtC0InModRm) | NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    { G_Operand, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OperandZeroExtends_v) },
    { M_Operand, NACL_OPFLAG(OpAddress) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprAddress | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprConstant[0] , 4, ExprSize8 },
  { ExprConstant[0] , -0x1, ExprSize32 | ExprSignedHex },
};
0000000000000000: 64 48 33 14 25 28 00 00 00                   xor %rdx, %fs[0x28]
  { NoPrefix, {  0x33 }, Xor,  NACLi_386L,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    { G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[10] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %rdx, ExprSet | ExprUsed | ExprDest | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprSegmentAddress[2] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %fs, ExprUsed | ExprSize16 },
  { ExprMemOffset[4] , 0, ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x28, ExprSize32 | ExprSignedHex },
};
0000000000000000: 48 b8 cd cc cc cc cc cc cc cc                mov %rax, 0xcccccccccccccccd
  { NoPrefix, {  0xb8 }, Mov,  NACLi_386,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeHasImmed) | NACL_IFLAG(OpcodePlusR) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    { OpcodeBaseMinus0, NACL_OPFLAG(OperandExtendsOpcode) },
    { G_OpcodeBase, NACL_OPFLAG(OpSet) },
    { I_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %rax, ExprSet | ExprSize64 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant64[2] , 0xcccccccccccccccd, ExprUsed | ExprSize64 | ExprUnsignedHex },
  { ExprConstant[0] , 0xcccccccd, ExprUnsignedHex },
  { ExprConstant[0] , 0xcccccccc, ExprUnsignedHex },
};
0000000000000000: 66 6b c0 16                                  imul %ax, %ax, 0x16
  { NoPrefix, {  0x6b }, Imul,  NACLi_386,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeHasImmed_b) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    { G_Operand, NACL_OPFLAG(OpSet) },
    { E_Operand, NACL_OPFLAG(OpUse) },
    { I_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %ax, ExprSet | ExprSize16 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %ax, ExprUsed | ExprSize16 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x16, ExprUsed | ExprSize8 | ExprUnsignedHex },
};
0000000000000000: 66 6b d8 16                                  imul %bx, %ax, 0x16
  { NoPrefix, {  0x6b }, Imul,  NACLi_386,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeHasImmed_b) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    { G_Operand, NACL_OPFLAG(OpSet) },
    { E_Operand, NACL_OPFLAG(OpUse) },
    { I_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %bx, ExprSet | ExprSize16 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %ax, ExprUsed | ExprSize16 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x16, ExprUsed | ExprSize8 | ExprUnsignedHex },
};
0000000000000000: 66 f7 e8                                     imul %ax
  { NoPrefix, {  0xf7 }, Imul,  NACLi_386,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    { Opcode5, NACL_OPFLAG(OperandExtendsOpcode) },
    { RegREDX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegREAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %dx, ExprSet | ExprSize16 },
  { OperandReference[1] , 2, ExprImplicit },
  { ExprRegister[0] , %ax, ExprSet | ExprUsed | ExprSize16 },
  { OperandReference[1] , 3, 0 },
  { ExprRegister[0] , %ax, ExprUsed | ExprSize16 },
};
0000000000000000: f6 ec                                        imul %ah
  { NoPrefix, {  0xf6 }, Imul,  NACLi_386,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OperandSize_b),
    { Opcode5, NACL_OPFLAG(OperandExtendsOpcode) },
    { RegAX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegAL, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
    { E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %ax, ExprSet | ExprSize16 },
  { OperandReference[1] , 2, ExprImplicit },
  { ExprRegister[0] , %al, ExprUsed | ExprSize8 },
  { OperandReference[1] , 3, 0 },
  { ExprRegister[0] , %ah, ExprUsed | ExprSize8 },
};
0000000000000000: 0f af 91 70 01 00 00                         imul %edx, [%rcx+0x170]
  { Prefix0F, {  0x0f, 0xaf }, Imul,  NACLi_386,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    { G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
    { E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %edx, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rcx, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x170, ExprSize32 | ExprSignedHex },
};
0000000000000000: 0f af c1                                     imul %eax, %ecx
  { Prefix0F, {  0x0f, 0xaf }, Imul,  NACLi_386,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    { G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
    { E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %ecx, ExprUsed | ExprSize32 },
};
0000000000000000: f6 fc                                        idiv %ah
  { NoPrefix, {  0xf6 }, Idiv,  NACLi_386,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeRex) | NACL_IFLAG(OperandSize_b),
    { Opcode7, NACL_OPFLAG(OperandExtendsOpcode) },
    { RegAL, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegAH, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
    { E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %al, ExprSet | ExprSize8 },
  { OperandReference[1] , 2, ExprImplicit },
  { ExprRegister[0] , %ah, ExprSet | ExprSize8 },
  { OperandReference[1] , 3, ExprImplicit },
  { ExprRegister[0] , %ax, ExprUsed | ExprSize16 },
  { OperandReference[1] , 4, 0 },
  { ExprRegister[0] , %ah, ExprUsed | ExprSize8 },
};
0000000000000000: f7 f9                                        idiv %ecx
  { NoPrefix, {  0xf7 }, Idiv,  NACLi_386,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    { Opcode7, NACL_OPFLAG(OperandExtendsOpcode) },
    { RegREDX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegREAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %edx, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 2, ExprImplicit },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 3, 0 },
  { ExprRegister[0] , %ecx, ExprUsed | ExprSize32 },
};
0000000000000000: f7 be 70 01 00 00                            idiv [%rsi+0x170]
  { NoPrefix, {  0xf7 }, Idiv,  NACLi_386,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    { Opcode7, NACL_OPFLAG(OperandExtendsOpcode) },
    { RegREDX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegREAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[10] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %edx, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 2, ExprImplicit },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 3, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rsi, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x170, ExprSize32 | ExprSignedHex },
};
0000000000000000: 48 f7 f9                                     idiv %rcx
  { NoPrefix, {  0xf7 }, Idiv,  NACLi_386,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    { Opcode7, NACL_OPFLAG(OperandExtendsOpcode) },
    { RegRDX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegRAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rdx, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 2, ExprImplicit },
  { ExprRegister[0] , %rax, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 3, 0 },
  { ExprRegister[0] , %rcx, ExprUsed | ExprSize64 },
};
0000000000000000: fc                                           cld
  { NoPrefix, {  0xfc }, Cld,  NACLi_386,
    NACL_EMPTY_IFLAGS,
  };
NaClExpVector[0] = {
};
0000000000000000: f6 d8                                        neg %al
  { NoPrefix, {  0xf6 }, Neg,  NACLi_386L,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeRex) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_b),
    { Opcode3, NACL_OPFLAG(OperandExtendsOpcode) },
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
  };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprUsed | ExprDest | ExprSize8 },
};
0000000000000000: f7 d9                                        neg %ecx
  { NoPrefix, {  0xf7 }, Neg,  NACLi_386L,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    { Opcode3, NACL_OPFLAG(OperandExtendsOpcode) },
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
  };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %ecx, ExprSet | ExprUsed | ExprDest | ExprSize32 },
};
0000000000000000: 49 f7 de                                     neg %r14
  { NoPrefix, {  0xf7 }, Neg,  NACLi_386L,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    { Opcode3, NACL_OPFLAG(OperandExtendsOpcode) },
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
  };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %r14, ExprSet | ExprUsed | ExprDest | ExprSize64 },
};
0000000000000000: 48 f7 da                                     neg %rdx
  { NoPrefix, {  0xf7 }, Neg,  NACLi_386L,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    { Opcode3, NACL_OPFLAG(OperandExtendsOpcode) },
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
  };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %rdx, ExprSet | ExprUsed | ExprDest | ExprSize64 },
};
0000000000000000: f6 d1                                        not %cl
  { NoPrefix, {  0xf6 }, Not,  NACLi_386L,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeRex) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_b),
    { Opcode2, NACL_OPFLAG(OperandExtendsOpcode) },
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
  };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %cl, ExprSet | ExprUsed | ExprDest | ExprSize8 },
};
0000000000000000: f7 d1                                        not %ecx
  { NoPrefix, {  0xf7 }, Not,  NACLi_386L,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    { Opcode2, NACL_OPFLAG(OperandExtendsOpcode) },
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
  };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %ecx, ExprSet | ExprUsed | ExprDest | ExprSize32 },
};
0000000000000000: 48 f7 d2                                     not %rdx
  { NoPrefix, {  0xf7 }, Not,  NACLi_386L,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    { Opcode2, NACL_OPFLAG(OperandExtendsOpcode) },
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
  };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %rdx, ExprSet | ExprUsed | ExprDest | ExprSize64 },
};
0000000000000000: f6 e2                                        mul %dl
  { NoPrefix, {  0xf6 }, Mul,  NACLi_386,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeRex) | NACL_IFLAG(OperandSize_b),
    { Opcode4, NACL_OPFLAG(OperandExtendsOpcode) },
    { RegAX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegAL, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
    { E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %ax, ExprSet | ExprSize16 },
  { OperandReference[1] , 2, ExprImplicit },
  { ExprRegister[0] , %al, ExprUsed | ExprSize8 },
  { OperandReference[1] , 3, 0 },
  { ExprRegister[0] , %dl, ExprUsed | ExprSize8 },
};
0000000000000000: f7 e2                                        mul %edx
  { NoPrefix, {  0xf7 }, Mul,  NACLi_386,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    { Opcode4, NACL_OPFLAG(OperandExtendsOpcode) },
    { RegREDX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegREAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %edx, ExprSet | ExprSize32 },
  { OperandReference[1] , 2, ExprImplicit },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 3, 0 },
  { ExprRegister[0] , %edx, ExprUsed | ExprSize32 },
};
0000000000000000: 48 f7 e7                                     mul %rdi
  { NoPrefix, {  0xf7 }, Mul,  NACLi_386,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    { Opcode4, NACL_OPFLAG(OperandExtendsOpcode) },
    { RegRDX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegRAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rdx, ExprSet | ExprSize64 },
  { OperandReference[1] , 2, ExprImplicit },
  { ExprRegister[0] , %rax, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 3, 0 },
  { ExprRegister[0] , %rdi, ExprUsed | ExprSize64 },
};
0000000000000000: 41 f7 e6                                     mul %r14d
  { NoPrefix, {  0xf7 }, Mul,  NACLi_386,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    { Opcode4, NACL_OPFLAG(OperandExtendsOpcode) },
    { RegREDX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegREAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %edx, ExprSet | ExprSize32 },
  { OperandReference[1] , 2, ExprImplicit },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 3, 0 },
  { ExprRegister[0] , %r14d, ExprUsed | ExprSize32 },
};
0000000000000000: 48 f7 f1                                     div %rcx
  { NoPrefix, {  0xf7 }, Div,  NACLi_386,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    { Opcode6, NACL_OPFLAG(OperandExtendsOpcode) },
    { RegRDX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegRAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rdx, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 2, ExprImplicit },
  { ExprRegister[0] , %rax, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 3, 0 },
  { ExprRegister[0] , %rcx, ExprUsed | ExprSize64 },
};
0000000000000000: 48 f7 71 38                                  div [%rcx+0x38]
  { NoPrefix, {  0xf7 }, Div,  NACLi_386,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    { Opcode6, NACL_OPFLAG(OperandExtendsOpcode) },
    { RegRDX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegRAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[10] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rdx, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 2, ExprImplicit },
  { ExprRegister[0] , %rax, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 3, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rcx, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x38, ExprSize8 | ExprSignedHex },
};
0000000000000000: f7 35 37 af 57 00                            div [%rip+0x57af37]
  { NoPrefix, {  0xf7 }, Div,  NACLi_386,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    { Opcode6, NACL_OPFLAG(OperandExtendsOpcode) },
    { RegREDX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegREAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[10] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %edx, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 2, ExprImplicit },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 3, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rip, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x57af37, ExprSize32 | ExprSignedHex },
};
0000000000000000: f2 0f 10 05 b5 dc 15 00                      movsd %xmm0, [%rip+0x15dcb5]
  { PrefixF20F, {  0x0f, 0x10 }, Movsd,  NACLi_SSE2,
    NACL_IFLAG(OpcodeUsesModRm),
    { Xmm_G_Operand, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { Xmm_E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %xmm0, ExprSet | ExprDest },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rip, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x15dcb5, ExprSize32 | ExprSignedHex },
};
0000000000000000: f2 0f 11 54 24 10                            movsd [%rsp+0x10], %xmm2
  { PrefixF20F, {  0x0f, 0x11 }, Movsd,  NACLi_SSE2,
    NACL_IFLAG(OpcodeUsesModRm),
    { Xmm_E_Operand, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { Xmm_G_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprDest | ExprSize64 },
  { ExprRegister[0] , %rsp, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x10, ExprSize8 | ExprSignedHex },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %xmm2, ExprUsed },
};
0000000000000000: f3 0f 10 02                                  movss %xmm0, [%rdx]
  { PrefixF30F, {  0x0f, 0x10 }, Movss,  NACLi_SSE,
    NACL_IFLAG(OpcodeUsesModRm),
    { Xmm_G_Operand, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { Xmm_E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %xmm0, ExprSet | ExprDest },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rdx, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: f3 0f 11 44 24 0c                            movss [%rsp+0xc], %xmm0
  { PrefixF30F, {  0x0f, 0x11 }, Movss,  NACLi_SSE,
    NACL_IFLAG(OpcodeUsesModRm),
    { Xmm_E_Operand, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { Xmm_G_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprDest | ExprSize64 },
  { ExprRegister[0] , %rsp, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0xc, ExprSize8 | ExprSignedHex },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %xmm0, ExprUsed },
};
0000000000000000: f3 0f 10 4c 24 1c                            movss %xmm1, [%rsp+0x1c]
  { PrefixF30F, {  0x0f, 0x10 }, Movss,  NACLi_SSE,
    NACL_IFLAG(OpcodeUsesModRm),
    { Xmm_G_Operand, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { Xmm_E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %xmm1, ExprSet | ExprDest },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rsp, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x1c, ExprSize8 | ExprSignedHex },
};
0000000000000000: f3 0f 11 44 24 0c                            movss [%rsp+0xc], %xmm0
  { PrefixF30F, {  0x0f, 0x11 }, Movss,  NACLi_SSE,
    NACL_IFLAG(OpcodeUsesModRm),
    { Xmm_E_Operand, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { Xmm_G_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprDest | ExprSize64 },
  { ExprRegister[0] , %rsp, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0xc, ExprSize8 | ExprSignedHex },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %xmm0, ExprUsed },
};
0000000000000000: f2 0f 5f cf                                  maxsd %xmm1, %xmm7
  { PrefixF20F, {  0x0f, 0x5f }, Maxsd,  NACLi_SSE2,
    NACL_IFLAG(OpcodeUsesModRm),
    { Xmm_G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { Xmm_E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %xmm1, ExprSet | ExprUsed | ExprDest },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %xmm7, ExprUsed },
};
0000000000000000: 0f c8                                        bswap %eax
  { Prefix0F, {  0x0f, 0xc8 }, Bswap,  NACLi_386,
    NACL_IFLAG(OpcodePlusR) | NACL_IFLAG(OperandSize_v),
    { OpcodeBaseMinus0, NACL_OPFLAG(OperandExtendsOpcode) },
    { G_OpcodeBase, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
  };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprSize32 },
};
0000000000000000: 48 0f c8                                     bswap %rax
  { Prefix0F, {  0x0f, 0xc8 }, Bswap,  NACLi_386,
    NACL_IFLAG(OpcodePlusR) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    { OpcodeBaseMinus0, NACL_OPFLAG(OperandExtendsOpcode) },
    { G_OpcodeBase, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
  };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %rax, ExprSet | ExprUsed | ExprSize64 },
};
0000000000000000: 49 0f cd                                     bswap %r13
  { Prefix0F, {  0x0f, 0xcd }, Bswap,  NACLi_386,
    NACL_IFLAG(OpcodePlusR) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    { OpcodeBaseMinus5, NACL_OPFLAG(OperandExtendsOpcode) },
    { G_OpcodeBase, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
  };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %r13, ExprSet | ExprUsed | ExprSize64 },
};
0000000000000000: 0f 6e 11                                     movd %mmx2, [%rcx]
  { Prefix0F, {  0x0f, 0x6e }, Movd,  NACLi_MMX,
    NACL_IFLAG(OpcodeUsesModRm),
    { Mmx_G_Operand, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %mmx2, ExprSet | ExprDest },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rcx, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: 49 0f 6e 11                                  movd %mmx2, [%r9]
  { Prefix0F, {  0x0f, 0x6e }, Movd,  NACLi_MMX,
    NACL_IFLAG(OpcodeUsesModRm),
    { Mmx_G_Operand, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %mmx2, ExprSet | ExprDest },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %r9, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: 66 0f 6e 11                                  movd %xmm2, [%rcx]
  { Prefix660F, {  0x0f, 0x6e }, Movd,  NACLi_SSE2,
    NACL_IFLAG(OpcodeUsesModRm),
    { Xmm_G_Operand, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %xmm2, ExprSet | ExprDest },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rcx, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: 0f 7e 0e                                     movd [%rsi], %mmx1
  { Prefix0F, {  0x0f, 0x7e }, Movd,  NACLi_MMX,
    NACL_IFLAG(OpcodeUsesModRm),
    { E_Operand, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { Mmx_G_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprDest | ExprSize64 },
  { ExprRegister[0] , %rsi, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %mmx1, ExprUsed },
};
0000000000000000: 49 0f 7e 0e                                  movd [%r14], %mmx1
  { Prefix0F, {  0x0f, 0x7e }, Movd,  NACLi_MMX,
    NACL_IFLAG(OpcodeUsesModRm),
    { E_Operand, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { Mmx_G_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprDest | ExprSize64 },
  { ExprRegister[0] , %r14, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %mmx1, ExprUsed },
};
0000000000000000: 0f 77                                        emms
  { Prefix0F, {  0x0f, 0x77 }, Emms,  NACLi_MMX,
    NACL_EMPTY_IFLAGS,
  };
NaClExpVector[0] = {
};
0000000000000000: f2 0f c2 c7 01                               cmpsd_xmm %xmm0, %xmm7, 0x1
  { PrefixF20F, {  0x0f, 0xc2 }, Cmpsd_xmm,  NACLi_SSE2,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeHasImmed_b),
    { Xmm_G_Operand, NACL_OPFLAG(OpSet) },
    { Xmm_E_Operand, NACL_OPFLAG(OpUse) },
    { I_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %xmm0, ExprSet },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %xmm7, ExprUsed },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x1, ExprUsed | ExprSize8 | ExprUnsignedHex },
};
0000000000000000: f2 0f c2 0d 67 87 10 00 05                   cmpsd_xmm %xmm1, [%rip+0x108767], 0x5
  { PrefixF20F, {  0x0f, 0xc2 }, Cmpsd_xmm,  NACLi_SSE2,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeHasImmed_b),
    { Xmm_G_Operand, NACL_OPFLAG(OpSet) },
    { Xmm_E_Operand, NACL_OPFLAG(OpUse) },
    { I_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[10] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %xmm1, ExprSet },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rip, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x108767, ExprSize32 | ExprSignedHex },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x5, ExprUsed | ExprSize8 | ExprUnsignedHex },
};
0000000000000000: 0f 6f 05 ba 87 0f 00                         movq %mmx0, [%rip+0xf87ba]
  { Prefix0F, {  0x0f, 0x6f }, Movq,  NACLi_MMX,
    NACL_IFLAG(OpcodeUsesModRm),
    { Mmx_G_Operand, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { Mmx_E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %mmx0, ExprSet | ExprDest },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rip, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0xf87ba, ExprSize32 | ExprSignedHex },
};
0000000000000000: 0f 6f c8                                     movq %mmx1, %mmx0
  { Prefix0F, {  0x0f, 0x6f }, Movq,  NACLi_MMX,
    NACL_IFLAG(OpcodeUsesModRm),
    { Mmx_G_Operand, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { Mmx_E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %mmx1, ExprSet | ExprDest },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %mmx0, ExprUsed },
};
0000000000000000: 0f 7f 0e                                     movq [%rsi], %mmx1
  { Prefix0F, {  0x0f, 0x7f }, Movq,  NACLi_MMX,
    NACL_IFLAG(OpcodeUsesModRm),
    { Mmx_E_Operand, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { Mmx_G_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprDest | ExprSize64 },
  { ExprRegister[0] , %rsi, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %mmx1, ExprUsed },
};
0000000000000000: 0f d1 0c 25 08 00 00 00                      psrlw %mmx1, [0x8]
  { Prefix0F, {  0x0f, 0xd1 }, Psrlw,  NACLi_MMX,
    NACL_IFLAG(OpcodeUsesModRm),
    { Mmx_G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { Mmx_E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %mmx1, ExprSet | ExprUsed | ExprDest },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x8, ExprSize32 | ExprSignedHex },
};
0000000000000000: 0f 71 d1 08                                  psrlw %mmx1, 0x8
  { Prefix0F, {  0x0f, 0x71 }, Psrlw,  NACLi_MMX,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(ModRmModIs0x3) | NACL_IFLAG(OpcodeHasImmed_b),
    { Opcode2, NACL_OPFLAG(OperandExtendsOpcode) },
    { Mmx_E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { I_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %mmx1, ExprSet | ExprUsed | ExprDest },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x8, ExprUsed | ExprSize8 | ExprUnsignedHex },
};
0000000000000000: 0f 6e e8                                     movd %mmx5, %eax
  { Prefix0F, {  0x0f, 0x6e }, Movd,  NACLi_MMX,
    NACL_IFLAG(OpcodeUsesModRm),
    { Mmx_G_Operand, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %mmx5, ExprSet | ExprDest },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
};
0000000000000000: f3 0f 6f 05 f9 77 0f 00                      movdqu %xmm0, [%rip+0xf77f9]
  { PrefixF30F, {  0x0f, 0x6f }, Movdqu,  NACLi_SSE2,
    NACL_IFLAG(OpcodeUsesModRm),
    { Xmm_G_Operand, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { Xmm_E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %xmm0, ExprSet | ExprDest },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rip, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0xf77f9, ExprSize32 | ExprSignedHex },
};
0000000000000000: f3 0f 6f 11                                  movdqu %xmm2, [%rcx]
  { PrefixF30F, {  0x0f, 0x6f }, Movdqu,  NACLi_SSE2,
    NACL_IFLAG(OpcodeUsesModRm),
    { Xmm_G_Operand, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { Xmm_E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %xmm2, ExprSet | ExprDest },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rcx, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: f3 0f 7f 0e                                  movdqu [%rsi], %xmm1
  { PrefixF30F, {  0x0f, 0x7f }, Movdqu,  NACLi_SSE2,
    NACL_IFLAG(OpcodeUsesModRm),
    { Xmm_E_Operand, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { Xmm_G_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprDest | ExprSize64 },
  { ExprRegister[0] , %rsi, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %xmm1, ExprUsed },
};
0000000000000000: 0f e7 0e                                     movntq [%rsi], %mmx1
  { Prefix0F, {  0x0f, 0xe7 }, Movntq,  NACLi_MMX,
    NACL_IFLAG(OpcodeLtC0InModRm) | NACL_IFLAG(OpcodeUsesModRm),
    { Mo_Operand, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { Mmx_G_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprDest | ExprSize64 },
  { ExprRegister[0] , %rsi, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %mmx1, ExprUsed },
};
0000000000000000: 66 0f 29 0c 24                               movapd [%rsp], %xmm1
  { Prefix660F, {  0x0f, 0x29 }, Movapd,  NACLi_SSE2,
    NACL_IFLAG(OpcodeUsesModRm),
    { Xmm_E_Operand, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { Xmm_G_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprDest | ExprSize64 },
  { ExprRegister[0] , %rsp, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %xmm1, ExprUsed },
};
0000000000000000: f3 0f 51 d0                                  sqrtss %xmm2, %xmm0
  { PrefixF30F, {  0x0f, 0x51 }, Sqrtss,  NACLi_SSE,
    NACL_IFLAG(OpcodeUsesModRm),
    { Xmm_G_Operand, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { Xmm_E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %xmm2, ExprSet | ExprDest },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %xmm0, ExprUsed },
};
0000000000000000: 48 ff c0                                     inc %rax
  { NoPrefix, {  0xff }, Inc,  NACLi_386L,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    { Opcode0, NACL_OPFLAG(OperandExtendsOpcode) },
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
  };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %rax, ExprSet | ExprUsed | ExprDest | ExprSize64 },
};
0000000000000000: ff 05 a4 76 39 00                            inc [%rip+0x3976a4]
  { NoPrefix, {  0xff }, Inc,  NACLi_386L,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    { Opcode0, NACL_OPFLAG(OperandExtendsOpcode) },
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprUsed | ExprDest | ExprSize64 },
  { ExprRegister[0] , %rip, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x3976a4, ExprSize32 | ExprSignedHex },
};
0000000000000000: ff c0                                        inc %eax
  { NoPrefix, {  0xff }, Inc,  NACLi_386L,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    { Opcode0, NACL_OPFLAG(OperandExtendsOpcode) },
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
  };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprDest | ExprSize32 },
};
0000000000000000: 41 ff c5                                     inc %r13d
  { NoPrefix, {  0xff }, Inc,  NACLi_386L,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    { Opcode0, NACL_OPFLAG(OperandExtendsOpcode) },
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
  };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %r13d, ExprSet | ExprUsed | ExprDest | ExprSize32 },
};
0000000000000000: fe c0                                        inc %al
  { NoPrefix, {  0xfe }, Inc,  NACLi_386L,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_b),
    { Opcode0, NACL_OPFLAG(OperandExtendsOpcode) },
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
  };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprUsed | ExprDest | ExprSize8 },
};
0000000000000000: fe c4                                        inc %ah
  { NoPrefix, {  0xfe }, Inc,  NACLi_386L,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_b),
    { Opcode0, NACL_OPFLAG(OperandExtendsOpcode) },
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
  };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %ah, ExprSet | ExprUsed | ExprDest | ExprSize8 },
};
0000000000000000: 41 fe c0                                     inc %r8b
  { NoPrefix, {  0xfe }, Inc,  NACLi_386L,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_b),
    { Opcode0, NACL_OPFLAG(OperandExtendsOpcode) },
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
  };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %r8b, ExprSet | ExprUsed | ExprDest | ExprSize8 },
};
0000000000000000: ff ca                                        dec %edx
  { NoPrefix, {  0xff }, Dec,  NACLi_386L,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    { Opcode1, NACL_OPFLAG(OperandExtendsOpcode) },
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
  };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %edx, ExprSet | ExprUsed | ExprDest | ExprSize32 },
};
0000000000000000: ff 0d 8f 76 39 00                            dec [%rip+0x39768f]
  { NoPrefix, {  0xff }, Dec,  NACLi_386L,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    { Opcode1, NACL_OPFLAG(OperandExtendsOpcode) },
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprUsed | ExprDest | ExprSize64 },
  { ExprRegister[0] , %rip, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x39768f, ExprSize32 | ExprSignedHex },
};
0000000000000000: 48 ff c8                                     dec %rax
  { NoPrefix, {  0xff }, Dec,  NACLi_386L,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    { Opcode1, NACL_OPFLAG(OperandExtendsOpcode) },
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
  };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %rax, ExprSet | ExprUsed | ExprDest | ExprSize64 },
};
0000000000000000: 49 ff cc                                     dec %r12
  { NoPrefix, {  0xff }, Dec,  NACLi_386L,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    { Opcode1, NACL_OPFLAG(OperandExtendsOpcode) },
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
  };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %r12, ExprSet | ExprUsed | ExprDest | ExprSize64 },
};
0000000000000000: fe c8                                        dec %al
  { NoPrefix, {  0xfe }, Dec,  NACLi_386L,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_b),
    { Opcode1, NACL_OPFLAG(OperandExtendsOpcode) },
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
  };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprUsed | ExprDest | ExprSize8 },
};
0000000000000000: fe cc                                        dec %ah
  { NoPrefix, {  0xfe }, Dec,  NACLi_386L,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_b),
    { Opcode1, NACL_OPFLAG(OperandExtendsOpcode) },
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
  };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %ah, ExprSet | ExprUsed | ExprDest | ExprSize8 },
};
0000000000000000: 41 fe c8                                     dec %r8b
  { NoPrefix, {  0xfe }, Dec,  NACLi_386L,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_b),
    { Opcode1, NACL_OPFLAG(OperandExtendsOpcode) },
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
  };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %r8b, ExprSet | ExprUsed | ExprDest | ExprSize8 },
};
0000000000000000: f0 0f b1 35 21 c6 31 00                      cmpxchg [%rip+0x31c621], %esi
  { Prefix0F, {  0x0f, 0xb1 }, Cmpxchg,  NACLi_386L,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    { RegREAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { G_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[10] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprUsed | ExprDest | ExprSize64 },
  { ExprRegister[0] , %rip, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x31c621, ExprSize32 | ExprSignedHex },
  { OperandReference[1] , 2, 0 },
  { ExprRegister[0] , %esi, ExprUsed | ExprSize32 },
};
0000000000000000: 0f b1 35 12 c6 31 00                         cmpxchg [%rip+0x31c612], %esi
  { Prefix0F, {  0x0f, 0xb1 }, Cmpxchg,  NACLi_386L,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    { RegREAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { G_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[10] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprUsed | ExprDest | ExprSize64 },
  { ExprRegister[0] , %rip, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x31c612, ExprSize32 | ExprSignedHex },
  { OperandReference[1] , 2, 0 },
  { ExprRegister[0] , %esi, ExprUsed | ExprSize32 },
};
0000000000000000: f0 41 0f b1 30                               cmpxchg [%r8], %esi
  { Prefix0F, {  0x0f, 0xb1 }, Cmpxchg,  NACLi_386L,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    { RegREAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { G_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[10] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprUsed | ExprDest | ExprSize64 },
  { ExprRegister[0] , %r8, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
  { OperandReference[1] , 2, 0 },
  { ExprRegister[0] , %esi, ExprUsed | ExprSize32 },
};
0000000000000000: f0 0f c1 02                                  xadd [%rdx], %eax
  { Prefix0F, {  0x0f, 0xc1 }, Xadd,  NACLi_386L,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeLockable),
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprUsed | ExprDest | ExprSize64 },
  { ExprRegister[0] , %rdx, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprSize32 },
};
0000000000000000: f0 0f c1 43 18                               xadd [%rbx+0x18], %eax
  { Prefix0F, {  0x0f, 0xc1 }, Xadd,  NACLi_386L,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeLockable),
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprUsed | ExprDest | ExprSize64 },
  { ExprRegister[0] , %rbx, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x18, ExprSize8 | ExprSignedHex },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprSize32 },
};
0000000000000000: f0 41 0f c1 00                               xadd [%r8], %eax
  { Prefix0F, {  0x0f, 0xc1 }, Xadd,  NACLi_386L,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeLockable),
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprUsed | ExprDest | ExprSize64 },
  { ExprRegister[0] , %r8, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprSize32 },
};
0000000000000000: 0f 05                                        syscall
  { Prefix0F, {  0x0f, 0x05 }, Syscall,  NACLi_SYSCALL,
    NACL_IFLAG(Opcode64Only),
    { RegRCX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegRIP, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rcx, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rip, ExprSet | ExprUsed | ExprSize64 },
};
0000000000000000: e4 08                                        in %al, 0x8; *NACL Disallows!*
  { NoPrefix, {  0xe4 }, In,  NACLi_ILLEGAL,
    NACL_IFLAG(OpcodeHasImmed_b),
    { RegAL, NACL_OPFLAG(OpSet) },
    { I_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprConstant[0] , 0x8, ExprUsed | ExprSize8 | ExprUnsignedHex },
};
0000000000000000: 66 e5 08                                     in %ax, 0x8; *NACL Disallows!*
  { NoPrefix, {  0xe5 }, In,  NACLi_ILLEGAL,
    NACL_IFLAG(OpcodeHasImmed_b) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    { RegREAX, NACL_OPFLAG(OpSet) },
    { I_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %ax, ExprSet | ExprSize16 },
  { OperandReference[1] , 1, 0 },
  { ExprConstant[0] , 0x8, ExprUsed | ExprSize8 | ExprUnsignedHex },
};
0000000000000000: e5 08                                        in %eax, 0x8; *NACL Disallows!*
  { NoPrefix, {  0xe5 }, In,  NACLi_ILLEGAL,
    NACL_IFLAG(OpcodeHasImmed_b) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    { RegREAX, NACL_OPFLAG(OpSet) },
    { I_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprConstant[0] , 0x8, ExprUsed | ExprSize8 | ExprUnsignedHex },
};
0000000000000000: ec                                           in %al, %dx; *NACL Disallows!*
  { NoPrefix, {  0xec }, In,  NACLi_ILLEGAL,
    NACL_EMPTY_IFLAGS,
    { RegAL, NACL_OPFLAG(OpSet) },
    { RegDX, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %dx, ExprUsed | ExprSize16 },
};
0000000000000000: 66 ed                                        in %ax, %dx; *NACL Disallows!*
  { NoPrefix, {  0xed }, In,  NACLi_ILLEGAL,
    NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    { RegREAX, NACL_OPFLAG(OpSet) },
    { RegDX, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %ax, ExprSet | ExprSize16 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %dx, ExprUsed | ExprSize16 },
};
0000000000000000: ed                                           in %eax, %dx; *NACL Disallows!*
  { NoPrefix, {  0xed }, In,  NACLi_ILLEGAL,
    NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    { RegREAX, NACL_OPFLAG(OpSet) },
    { RegDX, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %dx, ExprUsed | ExprSize16 },
};
0000000000000000: 55                                           push %rbp
  { NoPrefix, {  0x55 }, Push,  NACLi_386,
    NACL_IFLAG(OpcodePlusR) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o) | NACL_IFLAG(OperandSizeDefaultIs64),
    { OpcodeBaseMinus5, NACL_OPFLAG(OperandExtendsOpcode) },
    { RegRSP, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { G_OpcodeBase, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 2, 0 },
  { ExprRegister[0] , %rbp, ExprUsed | ExprSize64 },
};
0000000000000000: 0f 18 86 00 03 00 00                         prefetchnta [%rsi+0x300]
  { Prefix0F, {  0x0f, 0x18 }, Prefetchnta,  NACLi_SSE,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLtC0InModRm),
    { Opcode0, NACL_OPFLAG(OperandExtendsOpcode) },
    { Mb_Operand, NACL_EMPTY_OPFLAGS },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprSize64 },
  { ExprRegister[0] , %rsi, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x300, ExprSize32 | ExprSignedHex },
};
0000000000000000: 48 0f c3 07                                  movnti [%rdi], %rax
  { Prefix0F, {  0x0f, 0xc3 }, Movnti,  NACLi_SSE2,
    NACL_IFLAG(OpcodeLtC0InModRm) | NACL_IFLAG(OpcodeUsesModRm),
    { M_Operand, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { G_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprDest | ExprSize64 },
  { ExprRegister[0] , %rdi, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
};
0000000000000000: 0f ae f8                                     sfence
  { Prefix0F, {  0x0f, 0xae }, Sfence,  NACLi_SFENCE_CLFLUSH,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(ModRmModIs0x3),
    { Opcode7, NACL_OPFLAG(OperandExtendsOpcode) },
  };
NaClExpVector[0] = {
};
0000000000000000: 41 0f a3 c0                                  bt %r8d, %eax; *NACL Disallows!*
  { Prefix0F, {  0x0f, 0xa3 }, Bt,  NACLi_386,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(NaClIllegal) | NACL_IFLAG(AddressSizeDefaultIs32),
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpDest) },
    { G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpDest) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %r8d, ExprUsed | ExprDest | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %eax, ExprUsed | ExprDest | ExprSize32 },
};
0000000000000000: 41 db 2c 07                                  fld [%r15+%rax*1]
  { NoPrefix, {  0xdb }, Fld,  NACLi_X87,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLtC0InModRm),
    { Opcode5, NACL_OPFLAG(OperandExtendsOpcode) },
    { M_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %r15, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: dd 04 24                                     fld [%rsp]
  { NoPrefix, {  0xdd }, Fld,  NACLi_X87,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLtC0InModRm),
    { Opcode0, NACL_OPFLAG(OperandExtendsOpcode) },
    { M_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rsp, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: 0f b3 20                                     btr [%eax], %esp; *NACL Disallows!*
  { Prefix0F, {  0x0f, 0xb3 }, Btr,  NACLi_386,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(NaClIllegal) | NACL_IFLAG(AddressSizeDefaultIs32),
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { G_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprUsed | ExprDest | ExprSize32 },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %esp, ExprUsed | ExprSize32 },
};
0000000000000000: 0f a3 20                                     bt [%eax], %esp; *NACL Disallows!*
  { Prefix0F, {  0x0f, 0xa3 }, Bt,  NACLi_386,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(NaClIllegal) | NACL_IFLAG(AddressSizeDefaultIs32),
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpDest) },
    { G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpDest) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprDest | ExprSize32 },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %esp, ExprUsed | ExprDest | ExprSize32 },
};
0000000000000000: 0f bb 20                                     btc [%eax], %esp; *NACL Disallows!*
  { Prefix0F, {  0x0f, 0xbb }, Btc,  NACLi_386,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(NaClIllegal) | NACL_IFLAG(AddressSizeDefaultIs32),
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { G_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprUsed | ExprDest | ExprSize32 },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %esp, ExprUsed | ExprSize32 },
};
0000000000000000: 0f ab 20                                     bts [%eax], %esp; *NACL Disallows!*
  { Prefix0F, {  0x0f, 0xab }, Bts,  NACLi_386,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(NaClIllegal) | NACL_IFLAG(AddressSizeDefaultIs32),
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { G_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprUsed | ExprDest | ExprSize32 },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %esp, ExprUsed | ExprSize32 },
};
0000000000000000: 66 0f 78 c1 02 04                            extrq %xmm0, 0x2, 0x4
  { Prefix660F, {  0x0f, 0x78 }, Extrq,  NACLi_SSE4A,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeHasImmed_b) | NACL_IFLAG(OpcodeHasImmed2_b),
    { Opcode0, NACL_OPFLAG(OperandExtendsOpcode) },
    { Xmm_G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) | NACL_OPFLAG(AllowGOperandWithOpcodeInModRm) },
    { I_Operand, NACL_OPFLAG(OpUse) },
    { I2_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %xmm0, ExprSet | ExprUsed | ExprDest },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x2, ExprUsed | ExprSize8 | ExprUnsignedHex },
  { OperandReference[1] , 3, 0 },
  { ExprConstant[0] , 0x4, ExprUsed | ExprSize8 | ExprUnsignedHex },
};
0000000000000000: f2 0f 78 ca 02 04                            insertq %xmm1, %xmm2, 0x2, 0x4
  { PrefixF20F, {  0x0f, 0x78 }, Insertq,  NACLi_SSE4A,
    NACL_IFLAG(ModRmModIs0x3) | NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeHasImmed_b) | NACL_IFLAG(OpcodeHasImmed2_b),
    { Xmm_G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { Xmm_E_Operand, NACL_OPFLAG(OpUse) },
    { I_Operand, NACL_OPFLAG(OpUse) },
    { I2_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %xmm1, ExprSet | ExprUsed | ExprDest },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %xmm2, ExprUsed },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x2, ExprUsed | ExprSize8 | ExprUnsignedHex },
  { OperandReference[1] , 3, 0 },
  { ExprConstant[0] , 0x4, ExprUsed | ExprSize8 | ExprUnsignedHex },
};
0000000000000000: 66 0f 79 ca                                  extrq %xmm1, %xmm2
  { Prefix660F, {  0x0f, 0x79 }, Extrq,  NACLi_SSE4A,
    NACL_IFLAG(ModRmModIs0x3) | NACL_IFLAG(OpcodeUsesModRm),
    { Xmm_G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { Xmm_E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %xmm1, ExprSet | ExprUsed | ExprDest },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %xmm2, ExprUsed },
};
0000000000000000: f2 0f 79 ca                                  insertq %xmm1, %xmm2
  { PrefixF20F, {  0x0f, 0x79 }, Insertq,  NACLi_SSE4A,
    NACL_IFLAG(ModRmModIs0x3) | NACL_IFLAG(OpcodeUsesModRm),
    { Xmm_G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { Xmm_E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %xmm1, ExprSet | ExprUsed | ExprDest },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %xmm2, ExprUsed },
};
0000000000000000: 66 e9 00 00 01 02                            jmp 0x2010006
  { NoPrefix, {  0xe9 }, Jmp,  NACLi_JMPZ,
    NACL_IFLAG(OpcodeHasImmed_v) | NACL_IFLAG(Opcode64Only),
    { RegREIP, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { J_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OperandNear) | NACL_OPFLAG(OperandRelative) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rip, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprConstant[0] , 0x2010006, ExprUsed | ExprUnsignedHex | ExprJumpTarget },
};
0000000000000000: 67 40 a0 00 01 02 03                         mov %al, [0x3020100]
  { NoPrefix, {  0xa0 }, Mov,  NACLi_386,
    NACL_IFLAG(OpcodeHasImmed_Addr) | NACL_IFLAG(OperandSize_b),
    { RegAL, NACL_OPFLAG(OpSet) },
    { O_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x3020100, ExprSize32 | ExprUnsignedHex },
};
0000000000000000: 66 0f 3a 60 00 01                            pcmpestrm %xmm0, [%rax], 0x1
  { Prefix660F3A, {  0x0f, 0x3a, 0x60 }, Pcmpestrm,  NACLi_SSE42,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeHasImmed_b) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    { RegXMM0, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegEAX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegEDX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { Xmm_G_Operand, NACL_OPFLAG(OpUse) },
    { Xmm_E_Operand, NACL_OPFLAG(OpUse) },
    { I_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[16] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %xmm0, ExprSet },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %eax, ExprSet | ExprSize32 },
  { OperandReference[1] , 2, ExprImplicit },
  { ExprRegister[0] , %edx, ExprSet | ExprSize32 },
  { OperandReference[1] , 3, 0 },
  { ExprRegister[0] , %xmm0, ExprUsed },
  { OperandReference[1] , 4, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
  { OperandReference[1] , 5, 0 },
  { ExprConstant[0] , 0x1, ExprUsed | ExprSize8 | ExprUnsignedHex },
};
0000000000000000: 90                                           nop
  { NoPrefix, {  0x90 }, Nop,  NACLi_386,
    NACL_EMPTY_IFLAGS,
  };
NaClExpVector[0] = {
};
0000000000000000: 66 90                                        nop
  { NoPrefix, {  0x90 }, Nop,  NACLi_386,
    NACL_EMPTY_IFLAGS,
  };
NaClExpVector[0] = {
};
0000000000000000: 8d 76 00                                     lea %esi, [%rsi]
  { NoPrefix, {  0x8d }, Lea,  NACLi_386,
    NACL_IFLAG(OpcodeLtC0InModRm) | NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    { G_Operand, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OperandZeroExtends_v) },
    { M_Operand, NACL_OPFLAG(OpAddress) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %esi, ExprSet | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprAddress | ExprSize64 },
  { ExprRegister[0] , %rsi, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x0, ExprSize8 | ExprSignedHex },
};
0000000000000000: 8d 74 26 00                                  lea %esi, [%rsi]
  { NoPrefix, {  0x8d }, Lea,  NACLi_386,
    NACL_IFLAG(OpcodeLtC0InModRm) | NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    { G_Operand, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OperandZeroExtends_v) },
    { M_Operand, NACL_OPFLAG(OpAddress) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %esi, ExprSet | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprAddress | ExprSize64 },
  { ExprRegister[0] , %rsi, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x0, ExprSize8 | ExprSignedHex },
};
0000000000000000: 8d b6 00 00 00 00                            lea %esi, [%rsi]
  { NoPrefix, {  0x8d }, Lea,  NACLi_386,
    NACL_IFLAG(OpcodeLtC0InModRm) | NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    { G_Operand, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OperandZeroExtends_v) },
    { M_Operand, NACL_OPFLAG(OpAddress) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %esi, ExprSet | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprAddress | ExprSize64 },
  { ExprRegister[0] , %rsi, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x0, ExprSize32 | ExprSignedHex },
};
0000000000000000: 8d b4 26 00 00 00 00                         lea %esi, [%rsi]
  { NoPrefix, {  0x8d }, Lea,  NACLi_386,
    NACL_IFLAG(OpcodeLtC0InModRm) | NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    { G_Operand, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OperandZeroExtends_v) },
    { M_Operand, NACL_OPFLAG(OpAddress) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %esi, ExprSet | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprAddress | ExprSize64 },
  { ExprRegister[0] , %rsi, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x0, ExprSize32 | ExprSignedHex },
};
0000000000000000: 89 f6                                        mov %esi, %esi
  { NoPrefix, {  0x89 }, Mov,  NACLi_386,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    { E_Operand, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OperandZeroExtends_v) },
    { G_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %esi, ExprSet | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %esi, ExprUsed | ExprSize32 },
};
0000000000000000: 8d bc 27 00 00 00 00                         lea %edi, [%rdi]
  { NoPrefix, {  0x8d }, Lea,  NACLi_386,
    NACL_IFLAG(OpcodeLtC0InModRm) | NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    { G_Operand, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OperandZeroExtends_v) },
    { M_Operand, NACL_OPFLAG(OpAddress) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %edi, ExprSet | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprAddress | ExprSize64 },
  { ExprRegister[0] , %rdi, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x0, ExprSize32 | ExprSignedHex },
};
0000000000000000: 0f 1f 00                                     nop
  { NoPrefix, {  0x1f }, Nop,  NACLi_386,
    NACL_EMPTY_IFLAGS,
  };
NaClExpVector[0] = {
};
0000000000000000: 0f 1f 40 00                                  nop
  { NoPrefix, {  0x1f }, Nop,  NACLi_386,
    NACL_EMPTY_IFLAGS,
  };
NaClExpVector[0] = {
};
0000000000000000: 0f 1f 44 00 00                               nop
  { NoPrefix, {  0x1f }, Nop,  NACLi_386,
    NACL_EMPTY_IFLAGS,
  };
NaClExpVector[0] = {
};
0000000000000000: 66 0f 1f 44 00 00                            nop
  { NoPrefix, {  0x1f }, Nop,  NACLi_386,
    NACL_EMPTY_IFLAGS,
  };
NaClExpVector[0] = {
};
0000000000000000: 0f 1f 80 00 00 00 00                         nop
  { NoPrefix, {  0x1f }, Nop,  NACLi_386,
    NACL_EMPTY_IFLAGS,
  };
NaClExpVector[0] = {
};
0000000000000000: 0f 1f 84 00 00 00 00 00                      nop
  { NoPrefix, {  0x1f }, Nop,  NACLi_386,
    NACL_EMPTY_IFLAGS,
  };
NaClExpVector[0] = {
};
0000000000000000: 66 0f 1f 84 00 00 00 00 00                   nop
  { NoPrefix, {  0x1f }, Nop,  NACLi_386,
    NACL_EMPTY_IFLAGS,
  };
NaClExpVector[0] = {
};
0000000000000000: 66 2e 0f 1f 84 00 00 00 00 00                nop
  { NoPrefix, {  0x1f }, Nop,  NACLi_386,
    NACL_EMPTY_IFLAGS,
  };
NaClExpVector[0] = {
};
0000000000000000: 66 66 2e 0f 1f 84 00 00 00 00 00             nop
  { NoPrefix, {  0x1f }, Nop,  NACLi_386,
    NACL_EMPTY_IFLAGS,
  };
NaClExpVector[0] = {
};
0000000000000000: 66 66 66 2e 0f 1f 84 00 00 00 00 00          nop
  { NoPrefix, {  0x1f }, Nop,  NACLi_386,
    NACL_EMPTY_IFLAGS,
  };
NaClExpVector[0] = {
};
0000000000000000: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00       nop
  { NoPrefix, {  0x1f }, Nop,  NACLi_386,
    NACL_EMPTY_IFLAGS,
  };
NaClExpVector[0] = {
};
0000000000000000: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00    nop
  { NoPrefix, {  0x1f }, Nop,  NACLi_386,
    NACL_EMPTY_IFLAGS,
  };
NaClExpVector[0] = {
};
0000000000000000: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00 nop
  { NoPrefix, {  0x1f }, Nop,  NACLi_386,
    NACL_EMPTY_IFLAGS,
  };
NaClExpVector[0] = {
};
0000000000000000: 41 ff 74 3f 20                               push [%r15+%rdi*1+0x20]
  { NoPrefix, {  0xff }, Push,  NACLi_386,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o) | NACL_IFLAG(OperandSizeDefaultIs64),
    { Opcode6, NACL_OPFLAG(OperandExtendsOpcode) },
    { RegRSP, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 2, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %r15, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rdi, ExprUsed | ExprSize64 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x20, ExprSize8 | ExprSignedHex },
};
0000000000000000: 0f 0b                                        ud2
  { NoPrefix, {  0x0b }, Ud2,  NACLi_386,
    NACL_EMPTY_IFLAGS,
  };
NaClExpVector[0] = {
};
0000000000000000: 0f 70 00 00                                  pshufw %mmx0, [%rax], 0x0
  { Prefix0F, {  0x0f, 0x70 }, Pshufw,  NACLi_MMX,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeHasImmed_b),
    { Mmx_G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { Mmx_E_Operand, NACL_OPFLAG(OpUse) },
    { I_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[10] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %mmx0, ExprSet | ExprUsed | ExprDest },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x0, ExprUsed | ExprSize8 | ExprUnsignedHex },
};
0000000000000000: 0f ae 38                                     clflush [%rax]
  { Prefix0F, {  0x0f, 0xae }, Clflush,  NACLi_SFENCE_CLFLUSH,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLtC0InModRm),
    { Opcode7, NACL_OPFLAG(OperandExtendsOpcode) },
    { Mb_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpDest) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprDest | ExprSize64 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: 0f ae fc                                     sfence
  { Prefix0F, {  0x0f, 0xae }, Sfence,  NACLi_SFENCE_CLFLUSH,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(ModRmModIs0x3),
    { Opcode7, NACL_OPFLAG(OperandExtendsOpcode) },
  };
NaClExpVector[0] = {
};
0000000000000000: 40 dc 20                                     fsub %st0, [%rax]
  { NoPrefix, {  0xdc }, Fsub,  NACLi_X87,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLtC0InModRm),
    { Opcode4, NACL_OPFLAG(OperandExtendsOpcode) },
    { RegST0, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
    { M_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %st0, ExprSet | ExprUsed },
  { OperandReference[1] , 2, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: 0f ba 20 00                                  bt [%rax], 0x0
  { Prefix0F, {  0x0f, 0xba }, Bt,  NACLi_386,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeHasImmed_b) | NACL_IFLAG(Opcode64Only),
    { Opcode4, NACL_OPFLAG(OperandExtendsOpcode) },
    { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpDest) },
    { Ib_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpDest) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprDest | ExprSize64 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x0, ExprUsed | ExprDest | ExprSize8 | ExprUnsignedHex },
};
0000000000000000: 66 0f 3a 15 00 00                            pextrw [%rax], %xmm0, 0x0
  { Prefix660F3A, {  0x0f, 0x3a, 0x15 }, Pextrw,  NACLi_SSE41,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeHasImmed_b) | NACL_IFLAG(OperandSize_w),
    { E_Operand, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OperandZeroExtends_v) },
    { Xmm_G_Operand, NACL_OPFLAG(OpUse) },
    { I_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[10] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprSize64 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %xmm0, ExprUsed },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x0, ExprUsed | ExprSize8 | ExprUnsignedHex },
};
0000000000000000: 0f ec 00                                     paddsb %mmx0, [%rax]
  { Prefix0F, {  0x0f, 0xec }, Paddsb,  NACLi_MMX,
    NACL_IFLAG(OpcodeUsesModRm),
    { Mmx_G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { Mmx_E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %mmx0, ExprSet | ExprUsed | ExprDest },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: 0f f4 00                                     pmuludq %mmx0, [%rax]
  { Prefix0F, {  0x0f, 0xf4 }, Pmuludq,  NACLi_MMX,
    NACL_IFLAG(OpcodeUsesModRm),
    { Mmx_G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) },
    { Mmx_E_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %mmx0, ExprSet | ExprUsed | ExprDest },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000001000: 40 e0 00                                     loopne 0x1003
  { NoPrefix, {  0xe0 }, Loopne,  NACLi_JMP8,
    NACL_IFLAG(OpcodeHasImmed) | NACL_IFLAG(OperandSize_b),
    { RegREIP, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { J_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OperandNear) | NACL_OPFLAG(OperandRelative) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rip, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprConstant[0] , 0x1003, ExprUsed | ExprUnsignedHex | ExprJumpTarget },
};
0000000000000000: 40 e3 00                                     jrcxz 0x3
  { NoPrefix, {  0xe3 }, Jrcxz,  NACLi_JMP8,
    NACL_IFLAG(OpcodeHasImmed) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_b) | NACL_IFLAG(AddressSize_o),
    { RegREIP, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { J_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OperandNear) | NACL_OPFLAG(OperandRelative) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rip, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprConstant[0] , 0x3, ExprUsed | ExprUnsignedHex | ExprJumpTarget },
};
0000000000000000: 67 40 e3 00                                  jecxz 0x4
  { NoPrefix, {  0xe3 }, Jecxz,  NACLi_JMP8,
    NACL_IFLAG(OpcodeHasImmed) | NACL_IFLAG(OperandSize_b) | NACL_IFLAG(AddressSize_v),
    { RegREIP, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { J_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OperandNear) | NACL_OPFLAG(OperandRelative) },
  };
NaClExpVector[4] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %eip, ExprSet | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprConstant[0] , 0x4, ExprUsed | ExprUnsignedHex | ExprJumpTarget },
};
0000000000000000: 41 d9 f0                                     f2xm1 %st0
  { PrefixD9, {  0xd9, 0xf0 }, F2xm1,  NACLi_X87,
    NACL_EMPTY_IFLAGS,
    { RegST0, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
  };
NaClExpVector[2] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %st0, ExprSet | ExprUsed },
};
0000000000000000: 66 0f 52                                     invalid
  { Prefix660F, {  0x0f, 0x52 }, Invalid,  NACLi_INVALID,
    NACL_EMPTY_IFLAGS,
  };
NaClExpVector[0] = {
};
0000000000000000: 66 0f 53                                     invalid
  { Prefix660F, {  0x0f, 0x53 }, Invalid,  NACLi_INVALID,
    NACL_EMPTY_IFLAGS,
  };
NaClExpVector[0] = {
};
0000000000000000: f2 0f 52                                     invalid
  { PrefixF20F, {  0x0f, 0x52 }, Invalid,  NACLi_INVALID,
    NACL_EMPTY_IFLAGS,
  };
NaClExpVector[0] = {
};
0000000000000000: f2 0f 53                                     invalid
  { PrefixF20F, {  0x0f, 0x53 }, Invalid,  NACLi_INVALID,
    NACL_EMPTY_IFLAGS,
  };
NaClExpVector[0] = {
};
0000000000000000: 66 0f 78 00 00 00                            extrq %xmm0, 0x0, 0x0
  { Prefix660F, {  0x0f, 0x78 }, Extrq,  NACLi_SSE4A,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeHasImmed_b) | NACL_IFLAG(OpcodeHasImmed2_b),
    { Opcode0, NACL_OPFLAG(OperandExtendsOpcode) },
    { Xmm_G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpDest) | NACL_OPFLAG(AllowGOperandWithOpcodeInModRm) },
    { I_Operand, NACL_OPFLAG(OpUse) },
    { I2_Operand, NACL_OPFLAG(OpUse) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %xmm0, ExprSet | ExprUsed | ExprDest },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x0, ExprUsed | ExprSize8 | ExprUnsignedHex },
  { OperandReference[1] , 3, 0 },
  { ExprConstant[0] , 0x0, ExprUsed | ExprSize8 | ExprUnsignedHex },
};
0000000000000000: 26 66 e8 00 01 02 03                         call 0x3020107; *NACL Disallows!*
  { NoPrefix, {  0xe8 }, Call,  NACLi_ILLEGAL,
    NACL_IFLAG(OpcodeHasImmed_v) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_w),
    { RegRIP, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { RegRSP, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
    { J_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OperandNear) | NACL_OPFLAG(OperandRelative) },
  };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rip, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x3020107, ExprUsed | ExprUnsignedHex | ExprJumpTarget },
};
