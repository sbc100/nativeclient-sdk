# -*- python -*-
# Copyright 2009 The Native Client Authors.  All rights reserved.  Use
# of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.


Import('env')

# TODO(robertm): consider adding this to the top level scons files
env.Append(CPPPATH=['${TARGET_ROOT}'])
# this is needed for including gen/... files, see GENERATED below

# normally comment out -- uncomment out to test the pedantic removal
# check below.
#if env.Bit('linux') or env.Bit('mac'):
#  env.FilterOut(CCFLAGS=['-pedantic'])
#  env.FilterOut(CCFLAGS=['-Wall'])


if env['TARGET_ARCHITECTURE'] == 'x86':
  env.Append(LIBS=['ncvalidate'])
elif env['TARGET_ARCHITECTURE'] == 'arm':
  env.Append(LIBS=['ncvalidate_arm_v2',
                   'arm_validator_core'])
else:
  # unknown architcture
  assert 0

# Make a copy of debug CRT for now.
# TODO(bradnelson): there should be a better way to generalize this requirement.
crt = []
if env.AllBits('windows', 'debug'):
  for i in ['.', '${STAGING_DIR}']:
    crt += env.Replicate(i, '$VC80_DIR/vc/redist/Debug_NonRedist/'
                         'x86/Microsoft.VC80.DebugCRT')
    crt += env.Replicate(i, '$VC80_DIR/vc/redist/x86/Microsoft.VC80.CRT')



if env.Bit('windows'):
  syscall_impl = 'win/nacl_syscall_impl.c'
else:
  syscall_impl = 'linux/nacl_syscall_impl.c'

# TODO GENERATED CODE
GENERATED='${TARGET_ROOT}/gen/native_client/src/trusted/service_runtime'
env.Command(target=env.File(GENERATED + '/nacl_syscall_handlers.c'),
            source=[syscall_impl, 'nacl_syscall_handlers_gen2.py'],
            action=[Action('${PYTHON} ${SOURCES[1]} ${SYSCALL_GEN_FLAGS}'
                           ' -i ${SOURCE} -o ${TARGET}'),
                    ],
            )


if env['BUILD_ARCHITECTURE'] == 'x86':
  modules_env = env.Clone()
  if not env.Bit('windows'):
    modules_env.FilterOut(ASFLAGS=['-m64'])
    modules_env.FilterOut(CCFLAGS=['-m64'])
    modules_env.FilterOut(LINKFLAGS = ['-m64', '-L/usr/lib64'])
    modules_env.Prepend(ASFLAGS = ['-m32', ],
                        CCFLAGS = ['-m32', ],
                        LINKFLAGS = ['-m32', '-L/usr/lib32'])

# ----------------------------------------------------------
# TODO(robertm): this library is too big and needs to be split up
#                for easier unit testing
ldr_inputs = [
    'dyn_array.c',
    'env_cleanser.c',
    'nacl_all_modules.c',
    'nacl_app_thread.c',
    'nacl_bottom_half.c',
    'nacl_closure.c',
    'nacl_globals.c',
    'nacl_memory_object.c',
    'nacl_sync_queue.c',
    'nacl_syscall_common.c',
    GENERATED + '/nacl_syscall_handlers.c',
    'nacl_syscall_hook.c',
    'nacl_text.c',
    'sel_addrspace.c',
    'sel_ldr.c',
    'sel_ldr-inl.c',
    'sel_ldr_standard.c',
    'sel_mem.c',
    'sel_util.c',
    'sel_util-inl.c',
    'sel_validate_image.c',
    'web_worker_stub.c',
    'elf_util.c',
]

if env['TARGET_ARCHITECTURE'] == 'x86':
  ldr_inputs += [
      'arch/x86/nacl_ldt_x86.c',
      ]
  if env['TARGET_SUBARCH'] == '32':
    ldr_inputs += [
        'arch/x86_32/nacl_app_32.c',
        'arch/x86_32/nacl_switch_32.S',
        'arch/x86_32/nacl_switch_to_app_32.c',
        'arch/x86_32/nacl_syscall_32.S',
        'arch/x86_32/nacl_tls_32.c',
        'arch/x86_32/sel_addrspace_x86_32.c',
        'arch/x86_32/sel_ldr_x86_32.c',
        'arch/x86_32/sel_rt_32.c',
        'arch/x86_32/springboard.S',
        'arch/x86_32/tramp_32.S',
        ]
  elif env['TARGET_SUBARCH'] == '64':
    ldr_inputs += [
        'arch/x86_64/nacl_app_64.c',
        'arch/x86_64/nacl_switch_64.S',
        'arch/x86_64/nacl_switch_to_app_64.c',
        'arch/x86_64/nacl_syscall_64.S',
        'arch/x86_64/nacl_tls_64.c',
        'arch/x86_64/sel_addrspace_x86_64.c',
        'arch/x86_64/sel_ldr_x86_64.c',
        'arch/x86_64/sel_rt_64.c',
        'arch/x86_64/tramp_64.S',
        ]
elif env['BUILD_ARCHITECTURE'] == 'arm':
  ldr_inputs += [
    'arch/arm/nacl_app.c',
    'arch/arm/nacl_switch_to_app_arm.c',
    'arch/arm/sel_rt.c',
    'arch/arm/nacl_tls.c',
    'arch/arm/sel_ldr_arm.c',
    'arch/arm/sel_addrspace_arm.c',
    'arch/arm/nacl_switch.S',
    'arch/arm/nacl_syscall.S',
    'arch/arm/springboard.S',
    'arch/arm/tramp_arm.S',
  ]

if env.Bit('windows'):
  ldr_inputs += [
    'win/nacl_ldt.c',
    'win/sel_memory.c',
    'win/sel_segments.c',
    'win/nacl_thread_nice.c',
  ]
elif env.Bit('mac'):
  ldr_inputs += [
    'osx/nacl_ldt.c',
    'linux/sel_memory.c',
    'linux/x86/sel_segments.c',
    'osx/nacl_thread_nice.c',
  ]
elif env.Bit('linux'):
  ldr_inputs += [
    'linux/sel_memory.c',
    'linux/nacl_thread_nice.c',
  ]
  if env['BUILD_ARCHITECTURE'] == 'x86':
    ldr_inputs += [
      'linux/x86/nacl_ldt.c',
      'linux/x86/sel_segments.c',
    ]
  elif env['BUILD_ARCHITECTURE'] == 'arm':
    ldr_inputs += [
      'linux/arm/sel_segments.c',
    ]

# ----------------------------------------------------------
# SDL hacks
# NOTE: there are some more sdl hacks in native_client//SConstruct
#       and native_client/site_scons/site_tools/sdl.py
# ----------------------------------------------------------
sdl_mode = ARGUMENTS.get('sdl', 'hermetic')
# Require a valid sdl mode.
if sdl_mode not in ['hermetic', 'local', 'armlocal', 'none']:
  assert(0)

if sdl_mode == 'none':
  # NOTE: do not export multimedia syscalls unless we are using sdl
  syscall_gen_flags='-c -f Video -f Audio -f Multimedia'
else:
  syscall_gen_flags='-c'

syscall_gen_flags += ' -a ${TARGET_ARCHITECTURE} -s ${TARGET_SUBARCH}'

env.Append(SYSCALL_GEN_FLAGS=syscall_gen_flags)

# Set up the sdl_env
# NOTE: we try to use sdl_env as litte as possible
if sdl_mode == 'none':
  sdl_env = env.Clone()
else:
  sdl_env = env.Clone()
  sdl_env.Append(CPPDEFINES=['HAVE_SDL'])

  sdl_env.Tool('sdl')
  print '=' * 70
  print 'SDL build (%s) enabled for %s' % (sdl_mode, sdl_env['BUILD_TYPE'])
  print sdl_env.subst('Using version in ${SDL_DIR}')
  print '=' * 70

  # TODO(robertm): this should probably go into "Tool"
  if env.Bit('windows'):
    if sdl_env.Bit('debug'):
      sdl_env.Append(LINKFLAGS = ['/SUBSYSTEM:CONSOLE'])
    else:
      sdl_env.Append(LINKFLAGS = ['/SUBSYSTEM:WINDOWS'])

  if env.Bit('mac'):
    env_sdlmain = sdl_env.Clone()
    # TODO(robertm): explain why we need to disable this warning
    env_sdlmain.FilterOut(CCFLAGS=['-Werror'])
    ldr_inputs += [
        env_sdlmain.ComponentObject(
            'SDLApplication',
            '$MAIN_DIR/common/SDLApplication.m'),
    ]

# NOTE: uses sdl_env
sdl_env.ComponentLibrary('sel',
                         ldr_inputs)


env.ComponentLibrary('container',
                     ['generic_container/container.c',
                      ])


env.ComponentLibrary('expiration',
                     ['expiration.c',
                      ])


env.ComponentLibrary('nacl_xdr',
                     ['fs/xdr.c',
                      'fs/obj_proxy.c',
                      ])

env.ComponentLibrary('gio_shm',
                     ['gio_shm.c',
                      'gio_shm_unbounded.c',
                      ])

# NOTE(robertm): these extra libs were orignially only added to the
#                sel_ldr binary
# TODO(robertm): see who really needs them and remove
if env.Bit('windows'):
  env.Append(
      LIBS = [
          'ws2_32',
          'kernel32',
          'advapi32',
          'winmm',
# TODO(gregoryd): ntdll.lib is required for sem_get_value implementation but
# it is available in Windows DDK only. The DDK is not
# in third_party, but we might need to add it if we want to use it.
#          'ntdll',
      ],
  )

# TODO(bradnelson): clean this up more
sdl_dll = []
if sdl_mode != 'none' and sdl_mode != 'armlocal':
  if env.Bit('windows'):
    sdl_dll += sdl_env.Replicate('$STAGING_DIR', '$SDL_DIR/lib/SDL.dll')
    sdl_dll += sdl_env.Replicate('.', '$SDL_DIR/lib/SDL.dll')
    sdl_env.AddPluginPrerequisite(['$SDL_DIR/lib/SDL.dll'])
  elif env.Bit('mac'):
    # TODO: why do we replicate this THREE times?
    sdl_dll += sdl_env.Replicate('$TARGET_ROOT/Frameworks',
                                 '$SDL_DIR/SDL.framework')
    sdl_dll += sdl_env.Replicate('$OBJ_ROOT/Frameworks',
                                 '$SDL_DIR/SDL.framework')
    sdl_dll += sdl_env.Replicate('$OBJ_ROOT/src/trusted/Frameworks',
                                 '$SDL_DIR/SDL.framework')
    sdl_env.AddPluginPrerequisite(['$SDL_DIR/SDL.framework'])
  elif env.Bit('linux') and env['BUILD_ARCHITECTURE'] == 'x86':
    if env['BUILD_SUBARCH'] == '32':
      sdl_dll += sdl_env.Replicate('$STAGING_DIR',
                                   '$SDL_DIR/lib/libSDL-1.2.so.0')
      sdl_dll += sdl_env.Replicate('.',
                                   '$SDL_DIR/lib/libSDL-1.2.so.0')
      sdl_env.AddPluginPrerequisite(['$SDL_DIR/lib/libSDL-1.2.so.0'])
    elif env['BUILD_SUBARCH'] == '64':
      sdl_dll += sdl_env.Replicate('$STAGING_DIR',
                                   '$SDL_DIR/lib64/libSDL-1.2.so.0')
      sdl_dll += sdl_env.Replicate('.',
                                   '$SDL_DIR/lib64/libSDL-1.2.so.0')
      # add AddPluginPrerequisite if you build a 64-bit plugin
if ((not env.get('COVERAGE_ENABLED') or not env.Bit('windows')) and
    env['BUILD_ARCHITECTURE'] == env['TARGET_ARCHITECTURE']):


  if env['TARGET_ARCHITECTURE'] == 'x86':
    VALIDATOR_LIBS = ['ncopcode_utils', 'ncvalidate']
    if env['TARGET_SUBARCH']=='64':
      VALIDATOR_LIBS = VALIDATOR_LIBS + ['ncvalidate_sfi']
  elif env['TARGET_ARCHITECTURE'] == 'arm':
    VALIDATOR_LIBS = ['ncvalidate_arm_v2', 'arm_validator_core']
  else:
    VALIDATOR_LIBS = []

  # NOTE: uses sdl_env
  SEL_LDR_NODE = sdl_env.ComponentProgram('sel_ldr',
                                          'sel_main.c',
                                          EXTRA_LIBS=['sel',
                                                      'gio_shm',
                                                      'nonnacl_srpc',
                                                      'nrd_xfer',
                                                      'nonnacl_util_c',
                                                      'google_nacl_imc_c',
                                                      'container',
                                                      'platform',
                                                      'platform_qual_lib',
                                                      'gio',
                                                      'expiration',
                                                      ] + VALIDATOR_LIBS)
  # we need this to build the plugin, so register it here
  env.AddPluginPrerequisite(SEL_LDR_NODE[0])

  # NOTE: we do not have segments on ARM
  if env['BUILD_ARCHITECTURE'] == 'x86':
    env.ComponentProgram('nacl_ldt_unittest',
                         'nacl_ldt_unittest.c',
                         EXTRA_LIBS=['sel',
                                     'gio_shm',
                                     'platform',
                                     'gio',
                                     ])
  env.Requires(SEL_LDR_NODE, crt)
  env.Requires(SEL_LDR_NODE, sdl_dll)

env.EnsureRequiredBuildWarnings()

# ----------------------------------------------------------
# Unit Tests
# ----------------------------------------------------------

# NOTE: uses sdl and validator
# TODO(robertm): break this test up in smaller pieces with more managable
#                dependencies
gtest_env = sdl_env.Clone()

# This is necessary for unittest_main.c which includes gtest/gtest.h
# The problem is that gtest.h includes other files expecting the
# include path to be set.  We do *not*, however, strip out the
# -pedantic compiler flag for building non-gtest-using source files.
gtest_env.Prepend(CPPPATH=['${SOURCE_ROOT}/testing/gtest/include'])

if gtest_env.Bit('linux') or gtest_env.Bit('mac'):
  # because of: gtest-typed-test.h:236:46: error:
  # anonymous variadic macros were introduced in C99
  gtest_env.FilterOut(CCFLAGS=['-pedantic'])

unittest_inputs = [
    'unittest_main.cc',
    'sel_memory_unittest.cc',
    'nacl_sync_unittest.cc',
    'sel_mem_test.cc',
    'sel_ldr_test.cc',
]

if env['BUILD_ARCHITECTURE'] == env['TARGET_ARCHITECTURE']:
  unit_tests_exe = gtest_env.ComponentProgram('service_runtime_tests',
                                              unittest_inputs,
                                              EXTRA_LIBS=['gtest',
                                                          'sel',
                                                          'gio_shm',
                                                          'nonnacl_srpc',
                                                          'nrd_xfer',
                                                          'nonnacl_util_c',
                                                          'google_nacl_imc_c',
                                                          'platform',
                                                          'gio',
                                                          ] + VALIDATOR_LIBS)
  gtest_env.Requires(unit_tests_exe, crt)
  gtest_env.Requires(unit_tests_exe, sdl_dll)

  node = gtest_env.CommandTest(
      'gtest_output.xml.out',
      command=[unit_tests_exe, '--gtest_output=xml:${TARGET}'])
  gtest_env.AddNodeToTestSuite(node, ['small_tests'],
      'run_service_runtime_tests')


# Doesn't work on windows under coverage.
# TODO(bradnelson): fix this to work on windows under coverage.
if ((not env.Bit('windows') or not env.get('COVERAGE_ENABLED')) and
    env['BUILD_ARCHITECTURE'] == env['TARGET_ARCHITECTURE']):
  # NOTE: uses sdl and validator
  mmap_test_exe = sdl_env.ComponentProgram('mmap_test',
                                           ['mmap_test.c'],
                                           EXTRA_LIBS=['sel',
                                                       'gio_shm',
                                                       'nonnacl_srpc',
                                                       'nrd_xfer',
                                                       'nonnacl_util_c',
                                                       'google_nacl_imc_c',
                                                       'platform',
                                                       'gio',
                                                       ] + VALIDATOR_LIBS)
  sdl_env.Requires(mmap_test_exe, crt)
  sdl_env.Requires(mmap_test_exe, sdl_dll)

  if env['TARGET_ARCHITECTURE'] == 'x86' and env['BUILD_SUBARCH'] == '32':
    # TODO(robertm): This test emits lots of messages to stderr
    node = sdl_env.CommandTest (
        "mmap_test.out",
        # NOTE: the "[0]" subscript make this work on windows
        # TODO: maybe move this magic into CommandTest()
        command=[mmap_test_exe[0],
                 env.File('testdata/x86_32/hello_world.nexe')])
    sdl_env.AddNodeToTestSuite(node, ['medium_tests'])

  # also seems to have issues with windows coverage
  # NOTE: uses sdl and validator
  nacl_sync_cond_test_exe = sdl_env.ComponentProgram(
      'nacl_sync_cond_test',
      ['nacl_sync_cond_test.c'],
      EXTRA_LIBS=['sel',
                  'gio_shm',
                  'nonnacl_srpc',
                  'nrd_xfer',
                  'nonnacl_util_c',
                  'google_nacl_imc_c',
                  'platform',
                  'gio',
                  ] + VALIDATOR_LIBS)
  sdl_env.Requires(nacl_sync_cond_test_exe, crt)
  sdl_env.Requires(nacl_sync_cond_test_exe, sdl_dll)

  node = sdl_env.CommandTest(
      'nacl_sync_cond_test.out',
      command=[nacl_sync_cond_test_exe])
  sdl_env.AddNodeToTestSuite(node, ['medium_tests'], 'run_nacl_sync_cond_test')


expiration_test_exe = env.ComponentProgram('expiration_test',
                                           ['expiration_test.c'],
                                           EXTRA_LIBS=['expiration'])
node = env.CommandTest(
    'expiration_test.out',
    command=[expiration_test_exe])
env.Requires(expiration_test_exe, crt)
env.AddNodeToTestSuite(node, ['medium_tests'])


env_cleanser_test_exe = env.ComponentProgram('env_cleanser_test',
                                             ['env_cleanser_test.c'],
                                             EXTRA_LIBS=['sel',
                                                         'gio_shm',
                                                         ])
node = env.CommandTest(
    'env_cleanser_test.out',
    command=[env_cleanser_test_exe])
env.Requires(env_cleanser_test_exe, crt)
env.AddNodeToTestSuite(node, ['small_tests'])


if ((not env.get('COVERAGE_ENABLED') or not env.Bit('windows')) and
    env['BUILD_ARCHITECTURE'] == env['TARGET_ARCHITECTURE']):
  gio_shm_test_exe = sdl_env.ComponentProgram('gio_shm_test',
                                              ['gio_shm_test.c'],
                                              EXTRA_LIBS=['sel',
                                                          'gio_shm',
                                                          'nonnacl_srpc',
                                                          'nrd_xfer',
                                                          'nonnacl_util_c',
                                                          'google_nacl_imc_c',
                                                          'platform',
                                                          'gio',
                                                          ] + VALIDATOR_LIBS)
  if env['TARGET_ARCHITECTURE'] == 'arm':
    params = [ '-n', '512', '-m', '2']
  else:
    params = []  # default
  node = env.CommandTest(
      'gio_shm_test.out',
      command=[gio_shm_test_exe] + params)
  env.Requires(gio_shm_test_exe, crt)
  env.AddNodeToTestSuite(node, ['large_tests'], 'run_gio_shm_test')
  # no idea why validator gets pulled in, via sel, since
  # sel_validate_image is not used.  in any case, this is the only way
  # to get it to link on linux and arm.

  gio_shm_unbounded_test_exe = (
      sdl_env.ComponentProgram('gio_shm_unbounded_test',
                               ['gio_shm_unbounded_test.c'],
                               EXTRA_LIBS=['sel',
                                           'gio_shm',
                                           'nonnacl_srpc',
                                           'nrd_xfer',
                                           'nonnacl_util_c',
                                           'google_nacl_imc_c',
                                           'platform',
                                           'gio',
                                           ] + VALIDATOR_LIBS))
  node = env.CommandTest(
      'gio_shm_unbounded_test.out',
      command=[gio_shm_unbounded_test_exe,])
  env.Requires(gio_shm_unbounded_test_exe, crt)
  if env['TARGET_ARCHITECTURE'] == 'arm':
    env.AddNodeToTestSuite(node, ['large_tests_arm_hw_only'],
                           'run_gio_shm_unbounded_test')
  else:
    env.AddNodeToTestSuite(node, ['small_tests'], 'run_gio_shm_unbounded_test')


check_test_exe = env.ComponentProgram('nacl_check_test',
                                      ['nacl_check_test.c'],
                                      EXTRA_LIBS=['sel',
                                                  'gio_shm',
                                                  'platform',
                                                  'gio',
                                                  ])
node = env.CommandTest(
    'check_test.out',
    command=[check_test_exe, '-C'])
env.Requires(check_test_exe, crt)
env.AddNodeToTestSuite(node, ['small_tests'])


ABORT_EXIT = '17'  # magic, see nacl_check_test.c


node = env.CommandTest(
    'check_test_death.out',
    command=[check_test_exe, '-c'],
    exit_status=ABORT_EXIT)  # abort()
env.AddNodeToTestSuite(node, ['small_tests'])


if env.Bit('debug'):
  node = env.CommandTest(
      'dcheck_test_death.out',
      command=[check_test_exe, '-d'],
      exit_status=ABORT_EXIT)  # abort()
else:
  node = env.CommandTest(
      'dcheck_test_death.out',
      command=[check_test_exe, '-d'])  # no abort()
env.AddNodeToTestSuite(node, ['small_tests'])


node = env.CommandTest(
    'check_test_always_death.out',
    command=[check_test_exe, '-s', '0', '-C'])  # no abort
env.AddNodeToTestSuite(node, ['small_tests'])


node = env.CommandTest(
    'check_test_always_death.out',
    command=[check_test_exe, '-s', '0', '-c'],
    exit_status=ABORT_EXIT)  # abort
env.AddNodeToTestSuite(node, ['small_tests'])


node = env.CommandTest(
    'dcheck_test_never_death.out',
    command=[check_test_exe, '-s', '0', '-d'])  # no abort
env.AddNodeToTestSuite(node, ['small_tests'])


node = env.CommandTest(
    'dcheck_test_always_death.out',
    command=[check_test_exe, '-s', '1', '-d'],
    exit_status=ABORT_EXIT)  # abort()
env.AddNodeToTestSuite(node, ['small_tests'])


# Mac does not support thread local storage via "__thread" so do not run this
# test on Mac.
if not env.Bit('mac'):
  # Note that this test hangs in pthread_join() on ARM QEMU.
  TEST_SUITES = ['small_tests']
  if env['TARGET_ARCHITECTURE'] == 'arm':
    TEST_SUITES = ['small_tests_arm_hw_only']

  nacl_tls_unittest = env.ComponentProgram('nacl_tls_unittest',
                                           ['nacl_tls_unittest.c'],
                                           EXTRA_LIBS=['platform',
                                                       'gio'])
  node = env.CommandTest('nacl_tls_unittest.out',
                         command=[nacl_tls_unittest])
  env.AddNodeToTestSuite(node, TEST_SUITES, 'run_nacl_tls_unittest')


# ----------------------------------------------------------
# Integration Tests
# ----------------------------------------------------------

# Doesn't work on windows under coverage.
# TODO(bradnelson): fix this to work on windows under coverage.
# NOTE: uses sdl and validator
if ((not env.Bit('windows') or not env.get('COVERAGE_ENABLED')) and
    env['BUILD_ARCHITECTURE'] == env['TARGET_ARCHITECTURE']):
  obj_proxy_test_inputs = [ 'fs/obj_proxy_test.c', ]
  obj_proxy_test = sdl_env.ComponentProgram('obj_proxy_test',
                                            obj_proxy_test_inputs,
                                            EXTRA_LIBS=['sel',
                                                        'gio_shm',
                                                        'nonnacl_srpc',
                                                        'nrd_xfer',
                                                        'nonnacl_util_c',
                                                        'google_nacl_imc_c',
                                                        'platform',
                                                        'gio',
                                                        'nacl_xdr',
                                                        'container',
                                                        ] + VALIDATOR_LIBS)


  node = sdl_env.CommandTest(
      'obj_proxy_test.out',
      # NOTE: this is run out of obj/ rather than staging/
      [obj_proxy_test, '-n', '2048'],
      size='huge')
  # TODO(bsy): change this test to use less time -- most of it (on windows)
  # is in the RNG, so with this will inherently speed up when the RNG is
  # updated.

  sdl_env.Requires(node, sdl_dll)
  sdl_env.AddNodeToTestSuite(node, ['small_tests'], 'obj_proxy_tests')

# ----------------------------------------------------------
# Integration Tests With Canned x86 Binaries
# ----------------------------------------------------------

# TODO: Create integration test nexes for arm.
INTEGRATION_TESTS_X86 = [ 'mandel',
                          'fib_scalar',
                          'fib_array' ]
INTEGRATION_TESTS_X86_STDIN_OUT = ['$SCONSTRUCT_DIR/tests/mandel/test',
                                   '$SCONSTRUCT_DIR/tests/fib/fib_scalar_test',
                                   '$SCONSTRUCT_DIR/tests/fib/fib_array_test' ]

def AddIntegrationTest(test, location):
  if not test or not location:
    return;

  subarch = env['BUILD_SUBARCH']
  node = env.CommandSelLdrTestNacl(
      test + '_canned.out',
      command = [env.File('testdata/x86_' + subarch + '/' + test + '.nexe')],
      stdin = location + '.stdin',
      stdout_golden = location + '.stdout')
  env.AddNodeToTestSuite(node, ['medium_tests'])

if env['TARGET_ARCHITECTURE'] == 'x86':
  SUBARCH = env['BUILD_SUBARCH']

  node = env.CommandSelLdrTestNacl(
      'nacl_log.out',
      command = [env.File('testdata/x86_' + SUBARCH + '/hello_world.nexe')],
      log_golden = env.File('testdata/hello_world.log'),
      log_filter = '"^(Hello, World!)$|^\[[0-9,:.]*\] (e_ident\+1 = ELF)$"')
  env.AddNodeToTestSuite(node, ['medium_tests'])

  assert len(INTEGRATION_TESTS_X86) == len(INTEGRATION_TESTS_X86_STDIN_OUT)
  map(AddIntegrationTest,
      INTEGRATION_TESTS_X86,
      INTEGRATION_TESTS_X86_STDIN_OUT)

# ----------------------------------------------------------
# Death Tests With Canned x86 Binaries
# ----------------------------------------------------------
ERROR_WHILE_LOADING = '"^(Error while loading).*' + '(:[^:]*)"'

# TODO: Create death test nexes for arm.
DEATH_TESTS_X86 = [ 'old_abi',  # hello_world.nexe with an old ABI version
                    'integer_overflow_while_madvising',
                    'negative_hole',
                    'rodata_data_overlap',
                    'data_not_last',
                    'text_overlaps_rodata',
                    'text_overlaps_data',
                    'text_too_big' ]

NOT_AVAIL_X86_32 = [ ]

NOT_AVAIL_X86_64 = [ 'text_overlaps_rodata',
                     'text_overlaps_data' ]

def AddDeathTest(test, skip):
  if not test:
    return;

  if test in skip:
    print 'SKIPPING test ', test
    return;

  subarch = env['BUILD_SUBARCH']
  node = env.CommandSelLdrTestNacl(
      test  + '.out',
      command = [env.File('testdata/x86_' + subarch + '/' + test + '.nexe')],
      stderr_golden = env.File('testdata/' + test + '.stderr'),
      stderr_filter = ERROR_WHILE_LOADING,
      exit_status = '1')
  env.AddNodeToTestSuite(node, ['medium_tests'])


if env['TARGET_ARCHITECTURE'] == 'x86':
  SUBARCH = env['BUILD_SUBARCH']

  # built in tests/nullptr/
  node = env.CommandSelLdrTestNacl(
      'nullptr.out',
      command=[env.File('testdata/x86_' + SUBARCH + '/nullptr.nexe')],
      exit_status='segfault')
  env.AddNodeToTestSuite(node, ['medium_tests'])

  if SUBARCH == '32':
    skip = NOT_AVAIL_X86_32
  else:
    skip = NOT_AVAIL_X86_64

  for death_test in DEATH_TESTS_X86:
    AddDeathTest(death_test, skip)

# ----------------------------------------------------------
# More Death Tests
# ----------------------------------------------------------
if env['TARGET_ARCHITECTURE'] == env['BUILD_ARCHITECTURE']:
  # NOTE: uses sdl and validator
  sel_ldr_thread_death_test_exe = sdl_env.ComponentProgram(
      'sel_ldr_thread_death_test',
      ['sel_ldr_thread_death_test.c'],
      EXTRA_LIBS=['sel',
                  'gio_shm',
                  'nonnacl_srpc',
                  'nrd_xfer',
                  'nonnacl_util_c',
                  'google_nacl_imc_c',
                  'platform',
                  'gio',
                  ] + VALIDATOR_LIBS)

  node = sdl_env.CommandTest(
      'sel_ldr_thread_death_test.out',
      command=[sel_ldr_thread_death_test_exe],
      exit_status='segfault')
  sdl_env.Requires(node, sdl_dll)

  # TODO(tuduce): Make it work on windows.
  if not sdl_env.Bit('windows'):
    sdl_env.AddNodeToTestSuite(node, ['medium_tests'])
