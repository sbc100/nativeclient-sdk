diff -rbu qemu-0.10.1.orig/cpu-exec.c qemu-0.10.1.tracing/cpu-exec.c
--- qemu-0.10.1.orig/cpu-exec.c	2009-03-21 19:05:48.000000000 -0400
+++ qemu-0.10.1.tracing/cpu-exec.c	2009-09-11 08:22:49.370121000 -0400
@@ -48,8 +48,10 @@
 
 int tb_invalidated_flag;
 
-//#define DEBUG_EXEC
-//#define DEBUG_SIGNAL
+// @@LOCALMOD-BEGIN
+#define DEBUG_EXEC
+#define DEBUG_SIGNAL
+// @@LOCALMOD-END
 
 void cpu_loop_exit(void)
 {
@@ -531,10 +533,17 @@
                     env->exception_index = EXCP_INTERRUPT;
                     cpu_loop_exit();
                 }
+
+
+                // @LOCALMOD-BEGIN
+                spin_lock(&tb_lock);
+                // @LOCALMOD-END
+
 #ifdef DEBUG_EXEC
                 if (qemu_loglevel_mask(CPU_LOG_TB_CPU)) {
                     /* restore flags in standard format */
                     regs_to_env();
+
 #if defined(TARGET_I386)
                     env->eflags = env->eflags | helper_cc_compute_all(CC_OP) | (DF & DF_MASK);
                     log_cpu_state(env, X86_DUMP_CCOP);
@@ -564,8 +573,22 @@
 #endif
                 }
 #endif
-                spin_lock(&tb_lock);
+
+                // @LOCALMOD-BEGIN
+                //spin_lock(&tb_lock);
                 tb = tb_find_fast();
+                // @LOCALMOD-END
+
+                // @LOCALMOD-BEGIN
+#define VLINE  "@@=========================================================\n"
+                if ((long)tb->pc < 0x00100000) {
+                      qemu_log_mask(CPU_LOG_TB_CPU, VLINE);
+                }
+
+                // @LOCALMOD-END
+
+
+
                 /* Note: we do it here to avoid a gcc bug on Mac OS X when
                    doing it in tb_find_slow */
                 if (tb_invalidated_flag) {
@@ -760,6 +783,8 @@
     if (cpu_single_env)
         env = cpu_single_env; /* XXX: find a correct solution for multithread */
 #if defined(DEBUG_SIGNAL)
+    qemu_log_mask(CPU_LOG_EXEC,"qemu: SIGSEGV pc=0x%08lx address=%08lx w=%d oldset=0x%08lx\n",
+                pc, address, is_write, *(unsigned long *)old_set);
     qemu_printf("qemu: SIGSEGV pc=0x%08lx address=%08lx w=%d oldset=0x%08lx\n",
                 pc, address, is_write, *(unsigned long *)old_set);
 #endif
@@ -938,6 +963,7 @@
 #if defined(DEBUG_SIGNAL)
     printf("qemu: SIGSEGV pc=0x%08lx address=%08lx w=%d oldset=0x%08lx\n",
            pc, address, is_write, *(unsigned long *)old_set);
+
 #endif
     /* XXX: locking issue */
     if (is_write && page_unprotect(address, pc, puc)) {
diff -rbu qemu-0.10.1.orig/disas.c qemu-0.10.1.tracing/disas.c
--- qemu-0.10.1.orig/disas.c	2009-03-21 19:05:48.000000000 -0400
+++ qemu-0.10.1.tracing/disas.c	2009-09-11 09:53:49.927804000 -0400
@@ -10,7 +10,9 @@
 
 /* Filled in by elfload.c.  Simplistic, but will do for now. */
 struct syminfo *syminfos = NULL;
-
+// @LOCALMOD
+struct syminfo *syminfos2 = NULL;
+// @LOCALMOD
 /* Get LENGTH bytes from info's buffer, at target address memaddr.
    Transfer them to myaddr.  */
 int
@@ -299,11 +301,21 @@
     for (s = syminfos; s; s = s->next) {
         symbol = s->lookup_symbol(s, orig_addr);
         if (symbol[0] != '\0') {
-            break;
+            return symbol;
         }
     }
 
+    // @LOCALMOD
+    for (s = syminfos2; s; s = s->next) {
+        symbol = s->lookup_symbol(s, orig_addr);
+        if (symbol[0] != '\0') {
     return symbol;
+        }
+    }
+
+    // @LOCALMOD
+
+    return "";
 }
 
 #if !defined(CONFIG_USER_ONLY)
diff -rbu qemu-0.10.1.orig/disas.h qemu-0.10.1.tracing/disas.h
--- qemu-0.10.1.orig/disas.h	2009-03-21 19:05:48.000000000 -0400
+++ qemu-0.10.1.tracing/disas.h	2009-09-11 08:36:40.022909000 -0400
@@ -29,5 +29,8 @@
 
 /* Filled in by elfload.c.  Simplistic, but will do for now. */
 extern struct syminfo *syminfos;
+// @LOCALMOD
+extern struct syminfo *syminfos2;
+// @LOCALMOD
 
 #endif /* _QEMU_DISAS_H */
diff -rbu qemu-0.10.1.orig/linux-user/elfload.c qemu-0.10.1.tracing/linux-user/elfload.c
--- qemu-0.10.1.orig/linux-user/elfload.c	2009-03-21 19:05:41.000000000 -0400
+++ qemu-0.10.1.tracing/linux-user/elfload.c	2009-09-11 09:49:48.270714000 -0400
@@ -1030,18 +1030,22 @@
 }
 
 /* Best attempt to load symbols from this ELF object. */
-static void load_symbols(struct elfhdr *hdr, int fd)
+// @LOCALMOD
+static struct syminfo*  load_symbols(struct elfhdr *hdr, int fd, int dummy)
+// @LOCALMOD
 {
     unsigned int i, nsyms;
     struct elf_shdr sechdr, symtab, strtab;
     char *strings;
-    struct syminfo *s;
+    struct syminfo* s;
     struct elf_sym *syms;
-
+    // @LOCALMOD
+    printf("loading symbols\n");
+    // @LOCALMOD
     lseek(fd, hdr->e_shoff, SEEK_SET);
     for (i = 0; i < hdr->e_shnum; i++) {
         if (read(fd, &sechdr, sizeof(sechdr)) != sizeof(sechdr))
-            return;
+            return 0;
 #ifdef BSWAP_NEEDED
         bswap_shdr(&sechdr);
 #endif
@@ -1051,28 +1055,28 @@
                   + sizeof(sechdr) * sechdr.sh_link, SEEK_SET);
             if (read(fd, &strtab, sizeof(strtab))
                 != sizeof(strtab))
-                return;
+                return 0;
 #ifdef BSWAP_NEEDED
             bswap_shdr(&strtab);
 #endif
             goto found;
         }
     }
-    return; /* Shouldn't happen... */
+    return 0; /* Shouldn't happen... */
 
  found:
     /* Now know where the strtab and symtab are.  Snarf them. */
     s = malloc(sizeof(*s));
     syms = malloc(symtab.sh_size);
     if (!syms)
-        return;
+        return 0;
     s->disas_strtab = strings = malloc(strtab.sh_size);
     if (!s->disas_strtab)
-        return;
+        return 0;
 
     lseek(fd, symtab.sh_offset, SEEK_SET);
     if (read(fd, syms, symtab.sh_size) != symtab.sh_size)
-        return;
+        return 0;
 
     nsyms = symtab.sh_size / sizeof(struct elf_sym);
 
@@ -1103,7 +1107,7 @@
 
     lseek(fd, strtab.sh_offset, SEEK_SET);
     if (read(fd, strings, strtab.sh_size) != strtab.sh_size)
-        return;
+        return 0;
     s->disas_num_syms = nsyms;
 #if ELF_CLASS == ELFCLASS32
     s->disas_symtab.elf32 = syms;
@@ -1113,8 +1117,29 @@
     s->lookup_symbol = lookup_symbolxx;
 #endif
     s->next = syminfos;
-    syminfos = s;
+
+    // @LOCALMOD
+    return s;
+    // @LOCALMOD
+}
+
+
+// @@LOCAL-MOD
+void load_elf_secondary(const char* filename)
+{
+  struct elfhdr elf_ex;
+  int fd;
+  fd = open(filename, O_RDONLY);
+  if (fd <= 0)
+  {
+    printf("ERROR: opening secondary exe %s\n", filename);
+    return;
+  }
+
+  read(fd, &elf_ex, sizeof elf_ex);
+  syminfos2 = load_symbols(&elf_ex, fd, 0);
 }
+// @@LOCAL-MOD
 
 int load_elf_binary(struct linux_binprm * bprm, struct target_pt_regs * regs,
                     struct image_info * info)
@@ -1455,7 +1480,7 @@
     free(elf_phdata);
 
     if (qemu_log_enabled())
-	load_symbols(&elf_ex, bprm->fd);
+      syminfos = load_symbols(&elf_ex, bprm->fd, 0);
 
     if (interpreter_type != INTERPRETER_AOUT) close(bprm->fd);
     info->personality = (ibcs2_interpreter ? PER_SVR4 : PER_LINUX);
diff -rbu qemu-0.10.1.orig/linux-user/main.c qemu-0.10.1.tracing/linux-user/main.c
--- qemu-0.10.1.orig/linux-user/main.c	2009-03-21 19:05:42.000000000 -0400
+++ qemu-0.10.1.tracing/linux-user/main.c	2009-09-11 09:30:07.557090000 -0400
@@ -2351,7 +2351,25 @@
     filename = argv[optind];
     exec_path = argv[optind];
 
-    /* Zero out regs */
+    // @LOCALMOD
+    extern void load_elf_secondary(const char* s);
+    if (qemu_loglevel_mask(CPU_LOG_EXEC))
+    {
+      printf("qemu with NACL mods\n");
+      int i;
+      for (i = optind + 1; i < argc; ++i ) {
+        int len = strlen(argv[i]);
+        if (len > 5 && 0 == strcmp(".nexe", &argv[i][len - 5])) {
+          printf("FOUND NACL IMAGE: %s\n", argv[i]);
+          load_elf_secondary(argv[i]);
+        }
+      }
+
+    }
+    // @LOCALMOD
+
+
+/* Zero out regs */
     memset(regs, 0, sizeof(struct target_pt_regs));
 
     /* Zero out image_info */
