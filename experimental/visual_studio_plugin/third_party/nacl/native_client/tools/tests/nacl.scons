# Copyright 2008, Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#     * Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


import SCons.Script

Import('env')

if env['BUILD_ARCHITECTURE'] == 'x86':
  LDFLAGS=['-m32']
else:
  LDFLAGS=[]

env.Replace(
    # Ensure that these compilations use only SDK include files.
    CPPPATH=[],
    # Ensure that these compilations use only SDK include libraries, etc.
    # Only 32 bit libraries are supported by this test.
    LINKFLAGS=LDFLAGS,
    )

# Check that all the libraries were installed, a simple test builds and links.
env.ComponentProgram('libs_present_test.nexe',
                     ['libs_present_test.cc',
                      'libs_present_stub.cc',
                      'npp_gate.c'],
                     # This list should include all the libraries published
                     # into the SDK.
                     LIBS=['c',
                           'm',
                           'nacl',
                           'av',
                           'pthread',
                           'srpc',
                           'google_nacl_imc',
                           'google_nacl_npruntime',
                           'nosys'])

# Check that GDB can print backtrace.
env.ComponentProgram('hello_world_gdb.nexe',
                     'hello_world_gdb.c')

gdb_test = env.CommandGdbTestNacl(
    'hello_world_gdb.out',
    command=[env.File('hello_world_gdb.nexe')],
    stdout_golden=env.File('hello_world_gdb.stdout'),
    input=env.File('hello_world_gdb.in'),
    stdout_filter=("'(Breakpoint 1 at)|"
                   "(Breakpoint 1, )0x[0-9]+ (in hello_world)|"
                   "^(#0 ) 0x[0-9a-f]+ (in hello_world)|"
                   "^(#1 ) 0x[0-9a-f]+ (in main)'"
                   ),
    )

if 'TRUSTED_ENV' in env:
  env2 = env.Clone()
  env2.PrependENVPath('PATH', env['TRUSTED_ENV'].SubstList2('${STAGING_DIR}'))
  toolchain_test = env2.Command(
    'test_toolchain',
    ['${SCONSTRUCT_DIR}/tools/tests/test_toolchain.py',
     env['TRUSTED_ENV'].SubstList2('${STAGING_DIR}/ncval${PROGSUFFIX}')],
    '$PYTHON ${SOURCES[0].abspath}')
else:
  print ('WARNING: no trusted env specified so skipping toolchain test. '
         'Try, e.g. MODE=dbg-linux,nacl')
  toolchain_test = []

# Eventually we may want more SDK tests.
env.AddNodeToTestSuite(['libs_present_test.nexe', toolchain_test],
                       ['small_tests'], 'sdk_minimal_test')

env.AddNodeToTestSuite(['hello_world_gdb.nexe', gdb_test],
                       [], 'gdb_minimal_test')
