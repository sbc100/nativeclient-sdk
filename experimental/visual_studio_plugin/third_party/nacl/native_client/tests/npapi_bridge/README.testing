This directory contains files for testing the NPAPI remoting of the Native
Client browser plug-in.

Before testing, both the NaCl plug-in and sel_ldr must be installed in the
proper locations.

To test, please follow the following steps:

1. Open npapi_test.html in scons-out/nacl/staging.

  "Native Client NPAPI Plug-in Test" page should appear.

  From this page, two NaCl modules are executed. You can verify this by using
  the ps command or Windows task manager by looking for sel_ldr.

  The 2nd row staring from the [alert(embed1.bar)] button in the HTML page is
  for the 1st module.  The 3rd row is for the 2nd module.

2. Click the [alert(embed1.bar)] button in the 2nd row.

  By clicking this button, the browser tries to get the "bar" property from the
  1st NaCl module.  You should see the [JavaScript Application] dialog box and
  the message line should be "12, 34".

  When clicked, the 1st NaCl module created a JavaScript array object in the
  browser and added two elements 12, and 34, and returns that array. The dialog
  box displayed the content of the received array object.

  By clicking this button, the NaCl module also tries to open a file named
  "hello_npapi.txt" by specifying a URL and get the read-only file descriptor
  for that file. On success, the content of the file is added at the bottom of
  the test page.

3. Click the [alert(embed2.bar)] button in the 3rd row.

  You should see the same dialog box as the previous step. But this time, it is
  controlled by the 2nd NaCl module.

4. Click the [embed1.fillRect()] button in the 2nd row.

  By clicking this button, the browser tries to invoke the fillRect() method in
  the 1st NaCl module.  You should see the color of the left bottom rectangle
  changes every time you click this button.  Also within the status bar, the
  current color of the rectangle should be shown in text like "rgb(255, 0, 0)".

  When clicked, the 1st NaCl module accessed the canvas element "tutorial"
  within the HTML page using the DOM access capability of the NPAPI bridge and
  changed the color by using the canvas methods.

5. Click the [embed2.fillRect()] button in the 3rd row.

  You should see the color of right bottom rectangle changes every time you
  click this button.

  When clicked, the 2nd NaCl module accessed the canvas element "tutorial2" with
  in the HTML page.  Note with this test, two NaCl module execute the same NaCl
  ELF file.  You may wonder why they can access the different elements within
  the HTML page?  The answer is the name of the canvas element to access is
  passed to the NaCl module through the attributes in its embed element. For the
  1st module, canvas='tutorial' is specified; for the 2nd module, canvas=
  'tutorial2' is specified.

6. Click [embed1.setProxy()] in the 2nd row, and then click [proxy.fillRect()]
   in the 1st row.

  You should see the color of left bottom rectangle changes every time you
  click the [proxy.fillRect()] button.

  When [embed1.setProxy()] is clicked, the 1st NaCl module sets its scriptable
  object to the "proxy" property of the browser window.  When [proxy.fillRect()]
  is clicked, the browser invokes the fillRect() method in the proxy object,
  which is forwarded to the 1st NaCl module by the NPAPI bridge, and fillRect()
  method in the 1st NaCl module is called to change the color of the left bottom
  rectangle.

7. Click [embed2.setProxy()] in the 3rd row, and then click
   [proxy.fillRect()].

  You should see the color of right bottom rectangle changes every time you
  click the [proxy.fillRect()] button.

  In this step, since an object owned by the 2nd module is set to the "proxy"
  property of the browser window, it is the color of the bottom right rectangle
  even though the same [proxy.fillRect()] button is clicked as the previous
  step.

8. Click [embed1.useProxy()] and [embed2.useProxy()].

  Again, you should see the color of right bottom rectangle changes every time
  you click either [embed1.useProxy()] or [embed2.useProxy()].

  When useProxy() method is called, the NaCl module tries to get the object
  from the "proxy" browser window property, and invoke the fillRect() method of
  the retrieved object. Since the object created by the 2nd module is stored in
  the "proxy" property by the previous step, it is the color of the bottom
  right rectangle that changes.

  If you click [embed1.setProxy()] in the 2nd row, and then click
  [embed1.useProxy()] or [embed2.useProxy()], it is the color of the bottom left
  rectangle that changes.
