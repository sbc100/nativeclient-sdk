# -*- python -*-
# Copyright 2008, Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#     * Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.



Import('env')

env.ComponentProgram('syscalls.nexe',
                     'syscalls.cc',
                     EXTRA_LIBS=['pthread'])

if not env.Bit('host_windows'):
  # Creating a R/W test file in the output directory.
  # Because this test gets built on one platform and run on another (arm),
  # explaining to scons that this file is a dependency of the build and not
  # a test is tricky. As a simple work-around, the test inputs have been made
  # a 'default' scons target.
  # TODO(bradnelson): find a better way to make the plumbing on this work.
  inputs = env.Command(env.File('file_ok_rdwr.txt'), env.File('file_ok.txt'),
             [Copy(env.File('file_ok_rdwr.txt'), env.File('file_ok.txt')),
              Chmod(env.File('file_ok_rdwr.txt'), 0755)])
  Default(inputs)

  # syscalls_test exercise open/read/write, so need filesystem access
  # via the debug flag to sel_ldr
  node = env.CommandSelLdrTestNacl(
      'syscalls_test.out',
      command=[env.File('syscalls.nexe'), env.File('file_ok_rdwr.txt')],
      stdout_golden=env.File('syscalls.stdout'),
      stdout_filter="'^(All tests PASSED)$|^(TEST.*)$'",
      sel_ldr_flags=['-d'],
                                   )
  env.AddNodeToTestSuite(node, ['small_tests'], 'run_syscall_test')
