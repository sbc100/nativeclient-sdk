# -*- python -*-
# Copyright 2010 The Native Client Authors.  All rights reserved.
# Use of this source code is governed by a BSD-style license that can
# be found in the LICENSE file.

Import('env')


# NOTE:  because we want to compile everything to bitcode before linking
# NOTE:  assembler source files requires special trickery, for now we
# NOTE:  have hacked tools/llvm/llvm-fake.py
# NOTE:  to recognize sandboxed_*.S as special

# env's BUILD_ARCH, BUILD_SUBARCH controls what assembly files to use.
def GetAssemblerFile(env):
  if env['BUILD_ARCHITECTURE'] == 'x86':
    if env['BUILD_SUBARCH'] == '32':
      return 'sandboxed_x86_32.S'
    elif env['BUILD_SUBARCH'] == '64':
      return 'sandboxed_x86_64.S'
    else:
      raise Exception, 'unknown x86 subarchitecture'
  elif env['BUILD_ARCHITECTURE'] == 'arm':
    return 'sandboxed_arm.S'
  else:
    raise Exception, 'unknown architecture'


# TODO(bsy): remove adding pthread once we figure out how to eliminate
# srpc library being added by default in nacl builds.  We don't
# actually need srpc, so all we're doing is bloating the nexe
# unnecessarily.
#
env.ComponentProgram('syscall_return_sandboxing.nexe',
                     ['syscall_return_sandboxing.c', GetAssemblerFile(env)],
                     EXTRA_LIBS=['pthread'],
                     )
node = env.CommandSelLdrTestNacl(
    'syscall_return_sandboxing.out',
    command=[env.File('syscall_return_sandboxing.nexe')])
env.AddNodeToTestSuite(node,
                       ['small_tests', 'sel_ldr_tests'],
                       'run_syscall_return_sandboxing_test')
