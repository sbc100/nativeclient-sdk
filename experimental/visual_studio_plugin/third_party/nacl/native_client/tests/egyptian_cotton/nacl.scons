# -*- python -*-
# Copyright 2010 The Native Client Authors.  All rights reserved.
# Use of this source code is governed by a BSD-style license that can
# be found in the LICENSE file.

Import('env')

# NOTE: make sure we can compile these benchmarks without libsrpc
#       sadly this does not do anything on x86 since libsrpc
#       is added by the driver
env.Replace(LIBS=['pthread', 'c', 'nacl'])

env.ComponentProgram('egyptian_cotton.nexe', 'egyptian_cotton.c')

platform_limits_known = False

# this test accepts the number of threads to attempt to create as an
# argument. NACL_THREAD_MAX is 8192 for x86-32 and x86-64, and 4096
# for the Arm.  See the header files
# src/trusted/service_runtime/arch/{x86,arm}/sel_ldr_{x86,arm}.h for
# the current values (and update this comment to reflect reality!).
# On the x86_32, the actual number of threads possible is slightly
# fewer than 8192, since the service runtime's trusted internal
# threads use the same resource pool.  In practice, 8189 works as of
# this writing (2010-03-10), but applications should not rely on this
# going forward, and we only test for 8180 below.  Furthermore, there
# may be other limitations, e.g, for x86_32, OSX may limit us to far
# fewer than 8192 (got to 2558 in one test run, when egyptian_cotton
# was compiled as a standalone non-NaCl program.)
#
# The following runs the test with different numbers of threads to be
# spawned depending on the architecture.  For the Arm, it is 4095
# threads.  Note that the main thread also counts as one more thread.
#
# BUG(bsy): With the Arm architecture under qemu, spawning more than 3
# threads under will cause qemu to deadlock on exit, even though the
# test passes, so this is marked as a hardware-only test.  If we were
# to compile this using the trusted toolchain and run the resultant
# Arm binary under qemu, qemu will segfault at 375 threads.  It is
# unclear as of this writing (2010-03-11) whether this is a qemu bug
# or a limitation/bug of the codesourcery pthread library.

test_suites = ['small_tests', 'sel_ldr_tests']

large_stack_args = ['--', '-s', '0x400000', '-n', '4095', '-f' ]


#
# WARNING: Magic numbers ahead!
#
# The high_thread_count_args is used to stress test the thread library
# and the service runtime by having the test binary
# (egyptian_cotton.nexe) allocate a large number of concurrent
# threads.  This is done to ensure that there are no sudden decrease
# in the number of threads that can be created.  While limits imposed
# by our threading design -- 4096 for arm, 8192 for x86-32, and
# essentially unlimited for x86-64 (though there's a statically sized
# table involved, so we chose to limit to 8192 as well) -- are of our
# design and thus easy to determine, the underlying host operating
# system also imposes limits on the number of real underlying host OS
# threads that can be created.  Thus, the magic numbers below are
# *empirically* determined.  This is somewhat unfortunate, since it'd
# be nice to have a better understanding of the source of these
# limits, and it'd be especially nice if, for example, they could be
# lifted by some simple configuration parameter (that do not require
# administrative rights).  Nonetheless, we use the empirically
# determined values to detect changes that might further reduce the
# thread limit in practice.  The limits were obtained by simply
# running egyptian_cotton.nexe manually and seeing where it fails, and
# subtracting a few, so that minor, inconsequential and negligible
# changes to the runtime libraries etc won't require updating this
# test.
#

if env['TARGET_ARCHITECTURE'] == 'arm':
  # so far, only linux.  and the limit that we hit is one that is
  # imposed by our threading implementation, not by the OS.
  test_suites = ['small_tests_arm_hw_only']
  high_thread_count_args = ['--', '-n', '4095']
  platform_limits_known = True
elif env['TARGET_ARCHITECTURE'] == 'x86':
  trusted = env.get('TRUSTED_ENV', None)
  if trusted:
    platform_limits_known = True
    if trusted.Bit('linux'):
      high_thread_count_args = ['--', '-n', '8180']
    elif trusted.Bit('mac'):
      high_thread_count_args = ['--', '-n', '2558']
    elif trusted.Bit('windows'):
      high_thread_count_args = ['--', '-n', '900']
    else:
      print 'Unknown host OS: threading limit unknown'
      assert 0
else:
  print 'Unknown target architecture -- architecture/host OS thread'
  print 'limits are unknown'
  assert 0

if not platform_limits_known:
  Return()

tests = [ ('egyptian_cotton_test', high_thread_count_args),
          ('thread_stack_alloc_test', large_stack_args) ]

def ThreadTestNode(name, args):
  cmd = [env.File('egyptian_cotton.nexe')] + args
  return env.CommandSelLdrTestNacl(name + '.out', command = cmd)

nodes = [ ThreadTestNode(name, args) for name, args in tests ]

for p, n in zip(tests, nodes):
  env.AddNodeToTestSuite(n, test_suites, 'run_' + p[0])
