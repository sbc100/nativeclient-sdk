--- vim72/src/os_unix.c	2008-08-06 04:01:40.000000000 -0700
+++ vim72/src/os_unix.c	2009-06-22 21:50:03.527562000 -0700
@@ -31,6 +31,8 @@
 
 #include "vim.h"
 
+#include "console_c.h"
+
 #ifdef FEAT_MZSCHEME
 # include "if_mzsch.h"
 #endif
@@ -320,9 +322,7 @@
     char_u	*s;
     int		len;
 {
-    write(1, (char *)s, len);
-    if (p_wd)		/* Unix is too fast, slow down a bit more */
-	RealWaitForChar(read_cmd_fd, p_wd, NULL);
+    ConsoleWrite((const char*)s, len);
 }
 
 /*
@@ -340,80 +340,7 @@
     long	wtime;	    /* don't use "time", MIPS cannot handle it */
     int		tb_change_cnt;
 {
-    int		len;
-
-    /* Check if window changed size while we were busy, perhaps the ":set
-     * columns=99" command was used. */
-    while (do_resize)
-	handle_resize();
-
-    if (wtime >= 0)
-    {
-	while (WaitForChar(wtime) == 0)		/* no character available */
-	{
-	    if (!do_resize)	/* return if not interrupted by resize */
-		return 0;
-	    handle_resize();
-	}
-    }
-    else	/* wtime == -1 */
-    {
-	/*
-	 * If there is no character available within 'updatetime' seconds
-	 * flush all the swap files to disk.
-	 * Also done when interrupted by SIGWINCH.
-	 */
-	if (WaitForChar(p_ut) == 0)
-	{
-#ifdef FEAT_AUTOCMD
-	    if (trigger_cursorhold() && maxlen >= 3
-					   && !typebuf_changed(tb_change_cnt))
-	    {
-		buf[0] = K_SPECIAL;
-		buf[1] = KS_EXTRA;
-		buf[2] = (int)KE_CURSORHOLD;
-		return 3;
-	    }
-#endif
-	    before_blocking();
-	}
-    }
-
-    for (;;)	/* repeat until we got a character */
-    {
-	while (do_resize)    /* window changed size */
-	    handle_resize();
-	/*
-	 * we want to be interrupted by the winch signal
-	 */
-	WaitForChar(-1L);
-	if (do_resize)	    /* interrupted by SIGWINCH signal */
-	    continue;
-
-	/* If input was put directly in typeahead buffer bail out here. */
-	if (typebuf_changed(tb_change_cnt))
-	    return 0;
-
-	/*
-	 * For some terminals we only get one character at a time.
-	 * We want the get all available characters, so we could keep on
-	 * trying until none is available
-	 * For some other terminals this is quite slow, that's why we don't do
-	 * it.
-	 */
-	len = read_from_input_buf(buf, (long)maxlen);
-	if (len > 0)
-	{
-#ifdef OS2
-	    int i;
-
-	    for (i = 0; i < len; i++)
-		if (buf[i] == 0)
-		    buf[i] = K_NUL;
-#endif
-	    return len;
-	}
-    }
+    return ConsoleRead(wtime, (char*)buf, maxlen);
 }
 
     static void
@@ -2908,6 +2835,8 @@
     signal_stack = malloc(SIGSTKSZ);
     init_signal_stack();
 #endif
+    setenv("VIMRUNTIME", "./runtime", 1);
+    ConsoleInit(NACL_DIM_W, NACL_DIM_H);
 }
 
 #if defined(EXITFREE) || defined(PROTO)
@@ -3145,24 +3074,6 @@
 # ifndef TIOCSETN
 #  define TIOCSETN TIOCSETP	/* for hpux 9.0 */
 # endif
-    static struct sgttyb ttybold;
-	   struct sgttyb ttybnew;
-
-    if (first)
-    {
-	first = FALSE;
-	ioctl(read_cmd_fd, TIOCGETP, &ttybold);
-    }
-
-    ttybnew = ttybold;
-    if (tmode == TMODE_RAW)
-    {
-	ttybnew.sg_flags &= ~(CRMOD | ECHO);
-	ttybnew.sg_flags |= RAW;
-    }
-    else if (tmode == TMODE_SLEEP)
-	ttybnew.sg_flags &= ~(ECHO);
-    ioctl(read_cmd_fd, TIOCSETN, &ttybnew);
 #endif
     curr_tmode = tmode;
 }
@@ -3179,48 +3090,6 @@
     void
 get_stty()
 {
-    char_u  buf[2];
-    char_u  *p;
-
-    /* Why is NeXT excluded here (and not in os_unixx.h)? */
-#if defined(ECHOE) && defined(ICANON) && (defined(HAVE_TERMIO_H) || defined(HAVE_TERMIOS_H)) && !defined(__NeXT__)
-    /* for "new" tty systems */
-# ifdef HAVE_TERMIOS_H
-    struct termios keys;
-# else
-    struct termio keys;
-# endif
-
-# if defined(HAVE_TERMIOS_H)
-    if (tcgetattr(read_cmd_fd, &keys) != -1)
-# else
-    if (ioctl(read_cmd_fd, TCGETA, &keys) != -1)
-# endif
-    {
-	buf[0] = keys.c_cc[VERASE];
-	intr_char = keys.c_cc[VINTR];
-#else
-    /* for "old" tty systems */
-    struct sgttyb keys;
-
-    if (ioctl(read_cmd_fd, TIOCGETP, &keys) != -1)
-    {
-	buf[0] = keys.sg_erase;
-	intr_char = keys.sg_kill;
-#endif
-	buf[1] = NUL;
-	add_termcode((char_u *)"kb", buf, FALSE);
-
-	/*
-	 * If <BS> and <DEL> are now the same, redefine <DEL>.
-	 */
-	p = find_termcode((char_u *)"kD");
-	if (p != NULL && p[0] == buf[0] && p[1] == buf[1])
-	    do_fixdel(NULL);
-    }
-#if 0
-    }	    /* to keep cindent happy */
-#endif
 }
 
 #endif /* VMS  */
@@ -4683,356 +4552,7 @@
     long	msec;
     int		*check_for_gpm;
 {
-    int		ret;
-#if defined(FEAT_XCLIPBOARD) || defined(USE_XSMP) || defined(FEAT_MZSCHEME)
-    static int	busy = FALSE;
-
-    /* May retry getting characters after an event was handled. */
-# define MAY_LOOP
-
-# if defined(HAVE_GETTIMEOFDAY) && defined(HAVE_SYS_TIME_H)
-    /* Remember at what time we started, so that we know how much longer we
-     * should wait after being interrupted. */
-#  define USE_START_TV
-    struct timeval  start_tv;
-
-    if (msec > 0 && (
-#  ifdef FEAT_XCLIPBOARD
-	    xterm_Shell != (Widget)0
-#   if defined(USE_XSMP) || defined(FEAT_MZSCHEME)
-	    ||
-#   endif
-#  endif
-#  ifdef USE_XSMP
-	    xsmp_icefd != -1
-#   ifdef FEAT_MZSCHEME
-	    ||
-#   endif
-#  endif
-#  ifdef FEAT_MZSCHEME
-	(mzthreads_allowed() && p_mzq > 0)
-#  endif
-	    ))
-	gettimeofday(&start_tv, NULL);
-# endif
-
-    /* Handle being called recursively.  This may happen for the session
-     * manager stuff, it may save the file, which does a breakcheck. */
-    if (busy)
-	return 0;
-#endif
-
-#ifdef MAY_LOOP
-    for (;;)
-#endif
-    {
-#ifdef MAY_LOOP
-	int		finished = TRUE; /* default is to 'loop' just once */
-# ifdef FEAT_MZSCHEME
-	int		mzquantum_used = FALSE;
-# endif
-#endif
-#ifndef HAVE_SELECT
-	struct pollfd   fds[5];
-	int		nfd;
-# ifdef FEAT_XCLIPBOARD
-	int		xterm_idx = -1;
-# endif
-# ifdef FEAT_MOUSE_GPM
-	int		gpm_idx = -1;
-# endif
-# ifdef USE_XSMP
-	int		xsmp_idx = -1;
-# endif
-	int		towait = (int)msec;
-
-# ifdef FEAT_MZSCHEME
-	mzvim_check_threads();
-	if (mzthreads_allowed() && p_mzq > 0 && (msec < 0 || msec > p_mzq))
-	{
-	    towait = (int)p_mzq;    /* don't wait longer than 'mzquantum' */
-	    mzquantum_used = TRUE;
-	}
-# endif
-	fds[0].fd = fd;
-	fds[0].events = POLLIN;
-	nfd = 1;
-
-# ifdef FEAT_SNIFF
-#  define SNIFF_IDX 1
-	if (want_sniff_request)
-	{
-	    fds[SNIFF_IDX].fd = fd_from_sniff;
-	    fds[SNIFF_IDX].events = POLLIN;
-	    nfd++;
-	}
-# endif
-# ifdef FEAT_XCLIPBOARD
-	if (xterm_Shell != (Widget)0)
-	{
-	    xterm_idx = nfd;
-	    fds[nfd].fd = ConnectionNumber(xterm_dpy);
-	    fds[nfd].events = POLLIN;
-	    nfd++;
-	}
-# endif
-# ifdef FEAT_MOUSE_GPM
-	if (check_for_gpm != NULL && gpm_flag && gpm_fd >= 0)
-	{
-	    gpm_idx = nfd;
-	    fds[nfd].fd = gpm_fd;
-	    fds[nfd].events = POLLIN;
-	    nfd++;
-	}
-# endif
-# ifdef USE_XSMP
-	if (xsmp_icefd != -1)
-	{
-	    xsmp_idx = nfd;
-	    fds[nfd].fd = xsmp_icefd;
-	    fds[nfd].events = POLLIN;
-	    nfd++;
-	}
-# endif
-
-	ret = poll(fds, nfd, towait);
-# ifdef FEAT_MZSCHEME
-	if (ret == 0 && mzquantum_used)
-	    /* MzThreads scheduling is required and timeout occurred */
-	    finished = FALSE;
-# endif
-
-# ifdef FEAT_SNIFF
-	if (ret < 0)
-	    sniff_disconnect(1);
-	else if (want_sniff_request)
-	{
-	    if (fds[SNIFF_IDX].revents & POLLHUP)
-		sniff_disconnect(1);
-	    if (fds[SNIFF_IDX].revents & POLLIN)
-		sniff_request_waiting = 1;
-	}
-# endif
-# ifdef FEAT_XCLIPBOARD
-	if (xterm_Shell != (Widget)0 && (fds[xterm_idx].revents & POLLIN))
-	{
-	    xterm_update();      /* Maybe we should hand out clipboard */
-	    if (--ret == 0 && !input_available())
-		/* Try again */
-		finished = FALSE;
-	}
-# endif
-# ifdef FEAT_MOUSE_GPM
-	if (gpm_idx >= 0 && (fds[gpm_idx].revents & POLLIN))
-	{
-	    *check_for_gpm = 1;
-	}
-# endif
-# ifdef USE_XSMP
-	if (xsmp_idx >= 0 && (fds[xsmp_idx].revents & (POLLIN | POLLHUP)))
-	{
-	    if (fds[xsmp_idx].revents & POLLIN)
-	    {
-		busy = TRUE;
-		xsmp_handle_requests();
-		busy = FALSE;
-	    }
-	    else if (fds[xsmp_idx].revents & POLLHUP)
-	    {
-		if (p_verbose > 0)
-		    verb_msg((char_u *)_("XSMP lost ICE connection"));
-		xsmp_close();
-	    }
-	    if (--ret == 0)
-		finished = FALSE;	/* Try again */
-	}
-# endif
-
-
-#else /* HAVE_SELECT */
-
-	struct timeval  tv;
-	struct timeval	*tvp;
-	fd_set		rfds, efds;
-	int		maxfd;
-	long		towait = msec;
-
-# ifdef FEAT_MZSCHEME
-	mzvim_check_threads();
-	if (mzthreads_allowed() && p_mzq > 0 && (msec < 0 || msec > p_mzq))
-	{
-	    towait = p_mzq;	/* don't wait longer than 'mzquantum' */
-	    mzquantum_used = TRUE;
-	}
-# endif
-# ifdef __EMX__
-	/* don't check for incoming chars if not in raw mode, because select()
-	 * always returns TRUE then (in some version of emx.dll) */
-	if (curr_tmode != TMODE_RAW)
-	    return 0;
-# endif
-
-	if (towait >= 0)
-	{
-	    tv.tv_sec = towait / 1000;
-	    tv.tv_usec = (towait % 1000) * (1000000/1000);
-	    tvp = &tv;
-	}
-	else
-	    tvp = NULL;
-
-	/*
-	 * Select on ready for reading and exceptional condition (end of file).
-	 */
-	FD_ZERO(&rfds); /* calls bzero() on a sun */
-	FD_ZERO(&efds);
-	FD_SET(fd, &rfds);
-# if !defined(__QNX__) && !defined(__CYGWIN32__)
-	/* For QNX select() always returns 1 if this is set.  Why? */
-	FD_SET(fd, &efds);
-# endif
-	maxfd = fd;
-
-# ifdef FEAT_SNIFF
-	if (want_sniff_request)
-	{
-	    FD_SET(fd_from_sniff, &rfds);
-	    FD_SET(fd_from_sniff, &efds);
-	    if (maxfd < fd_from_sniff)
-		maxfd = fd_from_sniff;
-	}
-# endif
-# ifdef FEAT_XCLIPBOARD
-	if (xterm_Shell != (Widget)0)
-	{
-	    FD_SET(ConnectionNumber(xterm_dpy), &rfds);
-	    if (maxfd < ConnectionNumber(xterm_dpy))
-		maxfd = ConnectionNumber(xterm_dpy);
-	}
-# endif
-# ifdef FEAT_MOUSE_GPM
-	if (check_for_gpm != NULL && gpm_flag && gpm_fd >= 0)
-	{
-	    FD_SET(gpm_fd, &rfds);
-	    FD_SET(gpm_fd, &efds);
-	    if (maxfd < gpm_fd)
-		maxfd = gpm_fd;
-	}
-# endif
-# ifdef USE_XSMP
-	if (xsmp_icefd != -1)
-	{
-	    FD_SET(xsmp_icefd, &rfds);
-	    FD_SET(xsmp_icefd, &efds);
-	    if (maxfd < xsmp_icefd)
-		maxfd = xsmp_icefd;
-	}
-# endif
-
-# ifdef OLD_VMS
-	/* Old VMS as v6.2 and older have broken select(). It waits more than
-	 * required. Should not be used */
-	ret = 0;
-# else
-	ret = select(maxfd + 1, &rfds, NULL, &efds, tvp);
-# endif
-# ifdef __TANDEM
-	if (ret == -1 && errno == ENOTSUP)
-	{
-	    FD_ZERO(&rfds);
-	    FD_ZERO(&efds);
-	    ret = 0;
-	}
-#endif
-# ifdef FEAT_MZSCHEME
-	if (ret == 0 && mzquantum_used)
-	    /* loop if MzThreads must be scheduled and timeout occurred */
-	    finished = FALSE;
-# endif
-
-# ifdef FEAT_SNIFF
-	if (ret < 0 )
-	    sniff_disconnect(1);
-	else if (ret > 0 && want_sniff_request)
-	{
-	    if (FD_ISSET(fd_from_sniff, &efds))
-		sniff_disconnect(1);
-	    if (FD_ISSET(fd_from_sniff, &rfds))
-		sniff_request_waiting = 1;
-	}
-# endif
-# ifdef FEAT_XCLIPBOARD
-	if (ret > 0 && xterm_Shell != (Widget)0
-		&& FD_ISSET(ConnectionNumber(xterm_dpy), &rfds))
-	{
-	    xterm_update();	      /* Maybe we should hand out clipboard */
-	    /* continue looping when we only got the X event and the input
-	     * buffer is empty */
-	    if (--ret == 0 && !input_available())
-	    {
-		/* Try again */
-		finished = FALSE;
-	    }
-	}
-# endif
-# ifdef FEAT_MOUSE_GPM
-	if (ret > 0 && gpm_flag && check_for_gpm != NULL && gpm_fd >= 0)
-	{
-	    if (FD_ISSET(gpm_fd, &efds))
-		gpm_close();
-	    else if (FD_ISSET(gpm_fd, &rfds))
-		*check_for_gpm = 1;
-	}
-# endif
-# ifdef USE_XSMP
-	if (ret > 0 && xsmp_icefd != -1)
-	{
-	    if (FD_ISSET(xsmp_icefd, &efds))
-	    {
-		if (p_verbose > 0)
-		    verb_msg((char_u *)_("XSMP lost ICE connection"));
-		xsmp_close();
-		if (--ret == 0)
-		    finished = FALSE;   /* keep going if event was only one */
-	    }
-	    else if (FD_ISSET(xsmp_icefd, &rfds))
-	    {
-		busy = TRUE;
-		xsmp_handle_requests();
-		busy = FALSE;
-		if (--ret == 0)
-		    finished = FALSE;   /* keep going if event was only one */
-	    }
-	}
-# endif
-
-#endif /* HAVE_SELECT */
-
-#ifdef MAY_LOOP
-	if (finished || msec == 0)
-	    break;
-
-	/* We're going to loop around again, find out for how long */
-	if (msec > 0)
-	{
-# ifdef USE_START_TV
-	    struct timeval  mtv;
-
-	    /* Compute remaining wait time. */
-	    gettimeofday(&mtv, NULL);
-	    msec -= (mtv.tv_sec - start_tv.tv_sec) * 1000L
-				   + (mtv.tv_usec - start_tv.tv_usec) / 1000L;
-# else
-	    /* Guess we got interrupted halfway. */
-	    msec = msec / 2;
-# endif
-	    if (msec <= 0)
-		break;	/* waited long enough */
-	}
-#endif
-    }
-
-    return (ret > 0);
+    return 0;
 }
 
 #ifndef VMS
